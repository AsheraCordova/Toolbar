//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSToolbarPlugin\src\main\java\com\ashera\toolbar\ToolbarImpl.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "ActionMenuView.h"
#include "ActionMenuViewImpl.h"
#include "AutoCompleteTextView.h"
#include "BadgeDrawable.h"
#include "BadgeUtils.h"
#include "BaseHasWidgets.h"
#include "BaseMeasurableImageView.h"
#include "Context.h"
#include "Event.h"
#include "EventBus.h"
#include "EventBusHandler.h"
#include "EventCommand.h"
#include "EventCommandFactory.h"
#include "EventExpressionParser.h"
#include "Gravity.h"
#include "GravityCompat.h"
#include "HasWidgets.h"
#include "IActivity.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IListener.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "IdGenerator.h"
#include "J2ObjC_source.h"
#include "LayoutTransition.h"
#include "MeasureEvent.h"
#include "Menu.h"
#include "MenuBuilder.h"
#include "MenuItem.h"
#include "MenuParser.h"
#include "ModelExpressionParser.h"
#include "OnLayoutEvent.h"
#include "PluginInvoker.h"
#include "Rect.h"
#include "ResourceBundleUtils.h"
#include "SearchView.h"
#include "Toolbar.h"
#include "ToolbarImpl.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewGroupImpl.h"
#include "ViewImpl.h"
#include "ViewParent.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Runnable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"
#include "HasLifeCycleDecorators.h"


@class ASToolbarImpl_OnClickListener;
@class NSString;


#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


#pragma clang diagnostic ignored "-Wprotocol"

@interface ASToolbarImpl () {
 @public
  id uiView_;
  ADXToolbar *toolbar_;
  NSString *PREMEASURE_EVENT_;
  id<ASIWidget> titleView_;
  id<ASIWidget> subtitleView_;
  id<ASIWidget> logo_;
  id<ASIWidget> navigationIcon_;
  id<ASIWidget> actionMenuView_;
  NSString *menu_;
  id<ADXToolbar_OnMenuItemClickListener> onMenuItemClickListener_;
  id overflowIcon_;
  int32_t mButtonGravity_;
  int32_t screenWidth_;
  id<JavaUtilMap> badgeDrawables_;
  id<ADXSearchView_OnQueryTextListener> onQueryTextSubmit_;
  id<ADXSearchView_OnQueryTextListener> onQueryTextChange_;
  id<JavaUtilList> actionLayoutEventIds_;
  id<JavaUtilMap> searchviewAttributes_;
  id<JavaUtilList> badgeMenuItemIds_;
}

- (void)addPremeasureHandler;

- (void)setWidgetOnNativeClass;

- (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget;

- (void)createLayoutParamsWithADView:(ADView *)view;

- (ADXToolbar_LayoutParams *)getLayoutParamsWithADView:(ADView *)view;

- (void)setTitleWithASWidgetAttribute:(ASWidgetAttribute *)key
                         withNSString:(NSString *)strValue
                               withId:(id)objValue
            withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)initTitle OBJC_METHOD_FAMILY_NONE;

- (void)setSubtitleColorWithASWidgetAttribute:(ASWidgetAttribute *)key
                                 withNSString:(NSString *)strValue
                                       withId:(id)objValue
                    withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)setTitleTextColorWithASWidgetAttribute:(ASWidgetAttribute *)key
                                  withNSString:(NSString *)strValue
                                        withId:(id)objValue
                     withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)setSubtitleWithASWidgetAttribute:(ASWidgetAttribute *)key
                            withNSString:(NSString *)strValue
                                  withId:(id)objValue
               withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)initSubTitle OBJC_METHOD_FAMILY_NONE;

- (void)setLogoWithASWidgetAttribute:(ASWidgetAttribute *)key
                        withNSString:(NSString *)strValue
                              withId:(id)objValue
           withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)setNavigationIconWithASWidgetAttribute:(ASWidgetAttribute *)key
                                  withNSString:(NSString *)strValue
                                        withId:(id)objValue
                     withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)setMenuWithId:(id)objValue;

- (void)createMenu;

- (void)parseMenuWithNSString:(NSString *)menuId
                   withADMenu:(id<ADMenu>)menu
             withASHasWidgets:(id<ASHasWidgets>)parent;

- (void)setOnMenuItemClickListenerWithNSString:(NSString *)strValue
                                        withId:(id)objValue;

- (void)setOverflowIconWithASWidgetAttribute:(ASWidgetAttribute *)key
                                withNSString:(NSString *)strValue
                                      withId:(id)objValue
                   withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)setGravityWithId:(id)objValue;

- (void)setMaxButtonHeightWithId:(id)objValue;

- (void)setButtonGravityWithId:(id)objValue;

- (void)handlePreMeasureWithId:(id)payload;

- (id<ASIWidget>)getAutoCompleteImplWithADAutoCompleteTextView:(ADAutoCompleteTextView *)autoComplete;

- (void)setOnSuggestionListenerWithADMenuItem:(id<ADMenuItem>)menu
                   withADAutoCompleteTextView:(ADAutoCompleteTextView *)autoComplete;

- (ADXBadgeDrawable *)getOrCreateBadgeWithInt:(int32_t)id_;

- (void)reapplyBadgeDrawables;

- (void)setContentInsetEndWithId:(id)objValue;

- (void)setContentInsetStartWithId:(id)objValue;

- (void)setTitleMarginWithId:(id)objValue;

- (void)setOnQueryTextListenerWithNSString:(NSString *)action
                              withNSString:(NSString *)strValue
                                    withId:(id)objValue;

- (void)setActionLayoutEventIdsWithId:(id)objValue;

- (void)applySearchViewAttributesWithADMenuItem:(id<ADMenuItem>)menu;

- (ADAutoCompleteTextView *)findAutoCompleteWithADViewGroup:(ADViewGroup *)actionView;

- (void)setSearchviewAttributesWithId:(id)objValue;

- (void)setBadgeBackgroundColorsWithId:(id)objValue;

- (void)setValueOnBadgeDrawableWithId:(id)objValue
        withASToolbarImpl_ValueSetter:(id<ASToolbarImpl_ValueSetter>)valueSetter;

- (void)setBadgeMenuItemIdsWithId:(id)objValue;

- (void)setBadgeNumbersWithId:(id)objValue;

- (void)setBadgeVerticalOffsetsWithId:(id)objValue;

- (void)setBadgeHorizontalOffsetsWithId:(id)objValue;

- (void)setBadgeGravitiesWithId:(id)objValue;

- (void)setBadgeMaxCharacterCountsWithId:(id)objValue;

- (void)setBadgeAlphasWithId:(id)objValue;

- (void)setBadgeTextColorsWithId:(id)objValue;

- (void)setBadgeIsVisiblesWithId:(id)objValue;

- (void)setTextAppearanceResourcesWithId:(id)objValue;

- (void)setNavigationOnClickListenerWithASToolbarImpl_OnClickListener:(ASToolbarImpl_OnClickListener *)onClickListener;

@end

J2OBJC_FIELD_SETTER(ASToolbarImpl, uiView_, id)
J2OBJC_FIELD_SETTER(ASToolbarImpl, toolbar_, ADXToolbar *)
J2OBJC_FIELD_SETTER(ASToolbarImpl, PREMEASURE_EVENT_, NSString *)
J2OBJC_FIELD_SETTER(ASToolbarImpl, titleView_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASToolbarImpl, subtitleView_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASToolbarImpl, logo_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASToolbarImpl, navigationIcon_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASToolbarImpl, actionMenuView_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASToolbarImpl, menu_, NSString *)
J2OBJC_FIELD_SETTER(ASToolbarImpl, onMenuItemClickListener_, id<ADXToolbar_OnMenuItemClickListener>)
J2OBJC_FIELD_SETTER(ASToolbarImpl, overflowIcon_, id)
J2OBJC_FIELD_SETTER(ASToolbarImpl, badgeDrawables_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ASToolbarImpl, onQueryTextSubmit_, id<ADXSearchView_OnQueryTextListener>)
J2OBJC_FIELD_SETTER(ASToolbarImpl, onQueryTextChange_, id<ADXSearchView_OnQueryTextListener>)
J2OBJC_FIELD_SETTER(ASToolbarImpl, actionLayoutEventIds_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASToolbarImpl, searchviewAttributes_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ASToolbarImpl, badgeMenuItemIds_, id<JavaUtilList>)

__attribute__((unused)) static void ASToolbarImpl_addPremeasureHandler(ASToolbarImpl *self);

__attribute__((unused)) static void ASToolbarImpl_setWidgetOnNativeClass(ASToolbarImpl *self);

__attribute__((unused)) static void ASToolbarImpl_nativeRemoveViewWithASIWidget_(ASToolbarImpl *self, id<ASIWidget> widget);

__attribute__((unused)) static void ASToolbarImpl_createLayoutParamsWithADView_(ASToolbarImpl *self, ADView *view);

__attribute__((unused)) static ADXToolbar_LayoutParams *ASToolbarImpl_getLayoutParamsWithADView_(ASToolbarImpl *self, ADView *view);

__attribute__((unused)) static void ASToolbarImpl_setTitleWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASToolbarImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASToolbarImpl_initTitle(ASToolbarImpl *self);

__attribute__((unused)) static void ASToolbarImpl_setSubtitleColorWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASToolbarImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASToolbarImpl_setTitleTextColorWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASToolbarImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASToolbarImpl_setSubtitleWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASToolbarImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASToolbarImpl_initSubTitle(ASToolbarImpl *self);

__attribute__((unused)) static void ASToolbarImpl_setLogoWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASToolbarImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASToolbarImpl_setNavigationIconWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASToolbarImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASToolbarImpl_setMenuWithId_(ASToolbarImpl *self, id objValue);

__attribute__((unused)) static void ASToolbarImpl_createMenu(ASToolbarImpl *self);

__attribute__((unused)) static void ASToolbarImpl_parseMenuWithNSString_withADMenu_withASHasWidgets_(ASToolbarImpl *self, NSString *menuId, id<ADMenu> menu, id<ASHasWidgets> parent);

__attribute__((unused)) static void ASToolbarImpl_setOnMenuItemClickListenerWithNSString_withId_(ASToolbarImpl *self, NSString *strValue, id objValue);

__attribute__((unused)) static void ASToolbarImpl_setOverflowIconWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASToolbarImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASToolbarImpl_setGravityWithId_(ASToolbarImpl *self, id objValue);

__attribute__((unused)) static void ASToolbarImpl_setMaxButtonHeightWithId_(ASToolbarImpl *self, id objValue);

__attribute__((unused)) static void ASToolbarImpl_setButtonGravityWithId_(ASToolbarImpl *self, id objValue);

__attribute__((unused)) static void ASToolbarImpl_handlePreMeasureWithId_(ASToolbarImpl *self, id payload);

__attribute__((unused)) static id<ASIWidget> ASToolbarImpl_getAutoCompleteImplWithADAutoCompleteTextView_(ASToolbarImpl *self, ADAutoCompleteTextView *autoComplete);

__attribute__((unused)) static void ASToolbarImpl_setOnSuggestionListenerWithADMenuItem_withADAutoCompleteTextView_(ASToolbarImpl *self, id<ADMenuItem> menu, ADAutoCompleteTextView *autoComplete);

__attribute__((unused)) static ADXBadgeDrawable *ASToolbarImpl_getOrCreateBadgeWithInt_(ASToolbarImpl *self, int32_t id_);

__attribute__((unused)) static void ASToolbarImpl_reapplyBadgeDrawables(ASToolbarImpl *self);

__attribute__((unused)) static void ASToolbarImpl_setContentInsetEndWithId_(ASToolbarImpl *self, id objValue);

__attribute__((unused)) static void ASToolbarImpl_setContentInsetStartWithId_(ASToolbarImpl *self, id objValue);

__attribute__((unused)) static void ASToolbarImpl_setTitleMarginWithId_(ASToolbarImpl *self, id objValue);

__attribute__((unused)) static void ASToolbarImpl_setOnQueryTextListenerWithNSString_withNSString_withId_(ASToolbarImpl *self, NSString *action, NSString *strValue, id objValue);

__attribute__((unused)) static void ASToolbarImpl_setActionLayoutEventIdsWithId_(ASToolbarImpl *self, id objValue);

__attribute__((unused)) static void ASToolbarImpl_applySearchViewAttributesWithADMenuItem_(ASToolbarImpl *self, id<ADMenuItem> menu);

__attribute__((unused)) static ADAutoCompleteTextView *ASToolbarImpl_findAutoCompleteWithADViewGroup_(ASToolbarImpl *self, ADViewGroup *actionView);

__attribute__((unused)) static void ASToolbarImpl_setSearchviewAttributesWithId_(ASToolbarImpl *self, id objValue);

__attribute__((unused)) static void ASToolbarImpl_setBadgeBackgroundColorsWithId_(ASToolbarImpl *self, id objValue);

__attribute__((unused)) static void ASToolbarImpl_setValueOnBadgeDrawableWithId_withASToolbarImpl_ValueSetter_(ASToolbarImpl *self, id objValue, id<ASToolbarImpl_ValueSetter> valueSetter);

__attribute__((unused)) static void ASToolbarImpl_setBadgeMenuItemIdsWithId_(ASToolbarImpl *self, id objValue);

__attribute__((unused)) static void ASToolbarImpl_setBadgeNumbersWithId_(ASToolbarImpl *self, id objValue);

__attribute__((unused)) static void ASToolbarImpl_setBadgeVerticalOffsetsWithId_(ASToolbarImpl *self, id objValue);

__attribute__((unused)) static void ASToolbarImpl_setBadgeHorizontalOffsetsWithId_(ASToolbarImpl *self, id objValue);

__attribute__((unused)) static void ASToolbarImpl_setBadgeGravitiesWithId_(ASToolbarImpl *self, id objValue);

__attribute__((unused)) static void ASToolbarImpl_setBadgeMaxCharacterCountsWithId_(ASToolbarImpl *self, id objValue);

__attribute__((unused)) static void ASToolbarImpl_setBadgeAlphasWithId_(ASToolbarImpl *self, id objValue);

__attribute__((unused)) static void ASToolbarImpl_setBadgeTextColorsWithId_(ASToolbarImpl *self, id objValue);

__attribute__((unused)) static void ASToolbarImpl_setBadgeIsVisiblesWithId_(ASToolbarImpl *self, id objValue);

__attribute__((unused)) static void ASToolbarImpl_setTextAppearanceResourcesWithId_(ASToolbarImpl *self, id objValue);

__attribute__((unused)) static void ASToolbarImpl_setNavigationOnClickListenerWithASToolbarImpl_OnClickListener_(ASToolbarImpl *self, ASToolbarImpl_OnClickListener *onClickListener);

@interface ASToolbarImpl_PreMeasureHandler () {
 @public
  WEAK_ ASToolbarImpl *this$0_;
}

@end

@interface ASToolbarImpl_ToolbarExt () {
 @public
  WEAK_ ASToolbarImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  id<JavaUtilList> overlays_;
  int32_t mMaxWidth_;
  int32_t mMaxHeight_;
  id<JavaUtilMap> templates_;
}

@end

J2OBJC_FIELD_SETTER(ASToolbarImpl_ToolbarExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASToolbarImpl_ToolbarExt, onLayoutEvent_, ASOnLayoutEvent *)
J2OBJC_FIELD_SETTER(ASToolbarImpl_ToolbarExt, overlays_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASToolbarImpl_ToolbarExt, templates_, id<JavaUtilMap>)

@interface ASToolbarImpl_1 : NSObject < ADView_OnClickListener > {
 @public
  ASToolbarImpl *this$0_;
  id<ADMenuItem> val$menu_;
  NSString *val$myactionLayoutEventId_;
}

- (instancetype)initWithASToolbarImpl:(ASToolbarImpl *)outer$
                       withADMenuItem:(id<ADMenuItem>)capture$0
                         withNSString:(NSString *)capture$1;

- (void)onClickWithADView:(ADView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(ASToolbarImpl_1)

__attribute__((unused)) static void ASToolbarImpl_1_initWithASToolbarImpl_withADMenuItem_withNSString_(ASToolbarImpl_1 *self, ASToolbarImpl *outer$, id<ADMenuItem> capture$0, NSString *capture$1);

__attribute__((unused)) static ASToolbarImpl_1 *new_ASToolbarImpl_1_initWithASToolbarImpl_withADMenuItem_withNSString_(ASToolbarImpl *outer$, id<ADMenuItem> capture$0, NSString *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASToolbarImpl_1 *create_ASToolbarImpl_1_initWithASToolbarImpl_withADMenuItem_withNSString_(ASToolbarImpl *outer$, id<ADMenuItem> capture$0, NSString *capture$1);


@interface ASToolbarImpl_2 : NSObject < ADXSearchView_OnQueryTextListener > {
 @public
  ASToolbarImpl *this$0_;
}

- (instancetype)initWithASToolbarImpl:(ASToolbarImpl *)outer$;

- (bool)onQueryTextChangeWithNSString:(NSString *)text;

- (bool)onQueryTextSubmitWithNSString:(NSString *)query;

@end

J2OBJC_EMPTY_STATIC_INIT(ASToolbarImpl_2)

__attribute__((unused)) static void ASToolbarImpl_2_initWithASToolbarImpl_(ASToolbarImpl_2 *self, ASToolbarImpl *outer$);

__attribute__((unused)) static ASToolbarImpl_2 *new_ASToolbarImpl_2_initWithASToolbarImpl_(ASToolbarImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASToolbarImpl_2 *create_ASToolbarImpl_2_initWithASToolbarImpl_(ASToolbarImpl *outer$);


@interface ASToolbarImpl_ValueSetter : NSObject

@end

@interface ASToolbarImpl_OnQueryTextListener : NSObject < ADXSearchView_OnQueryTextListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (bool)onQueryTextSubmitWithNSString:(NSString *)query;

- (id<JavaUtilMap>)getOnQueryTextSubmitEventObjWithNSString:(NSString *)query;

- (bool)onQueryTextChangeWithNSString:(NSString *)newText;

- (id<JavaUtilMap>)getOnQueryTextChangeEventObjWithNSString:(NSString *)newText;

@end

J2OBJC_EMPTY_STATIC_INIT(ASToolbarImpl_OnQueryTextListener)

J2OBJC_FIELD_SETTER(ASToolbarImpl_OnQueryTextListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASToolbarImpl_OnQueryTextListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASToolbarImpl_OnQueryTextListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASToolbarImpl_OnQueryTextListener, action_, NSString *)

__attribute__((unused)) static void ASToolbarImpl_OnQueryTextListener_initWithASIWidget_withNSString_(ASToolbarImpl_OnQueryTextListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASToolbarImpl_OnQueryTextListener *new_ASToolbarImpl_OnQueryTextListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASToolbarImpl_OnQueryTextListener *create_ASToolbarImpl_OnQueryTextListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASToolbarImpl_OnQueryTextListener_initWithASIWidget_withNSString_withNSString_(ASToolbarImpl_OnQueryTextListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASToolbarImpl_OnQueryTextListener *new_ASToolbarImpl_OnQueryTextListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASToolbarImpl_OnQueryTextListener *create_ASToolbarImpl_OnQueryTextListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASToolbarImpl_OnQueryTextListener)


@interface ASToolbarImpl_OnClickListener : NSObject < ADView_OnClickListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onClickWithADView:(ADView *)v;

- (id<JavaUtilMap>)getOnClickEventObjWithADView:(ADView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(ASToolbarImpl_OnClickListener)

J2OBJC_FIELD_SETTER(ASToolbarImpl_OnClickListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASToolbarImpl_OnClickListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASToolbarImpl_OnClickListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASToolbarImpl_OnClickListener, action_, NSString *)

__attribute__((unused)) static void ASToolbarImpl_OnClickListener_initWithASIWidget_withNSString_(ASToolbarImpl_OnClickListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASToolbarImpl_OnClickListener *new_ASToolbarImpl_OnClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASToolbarImpl_OnClickListener *create_ASToolbarImpl_OnClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASToolbarImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(ASToolbarImpl_OnClickListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASToolbarImpl_OnClickListener *new_ASToolbarImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASToolbarImpl_OnClickListener *create_ASToolbarImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASToolbarImpl_OnClickListener)


@interface ASToolbarImpl_OnMenuItemClickListener : NSObject < ADXToolbar_OnMenuItemClickListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (bool)onMenuItemClickWithADMenuItem:(id<ADMenuItem>)item;

- (id<JavaUtilMap>)getOnMenuItemClickEventObjWithADMenuItem:(id<ADMenuItem>)item;

@end

J2OBJC_EMPTY_STATIC_INIT(ASToolbarImpl_OnMenuItemClickListener)

J2OBJC_FIELD_SETTER(ASToolbarImpl_OnMenuItemClickListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASToolbarImpl_OnMenuItemClickListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASToolbarImpl_OnMenuItemClickListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASToolbarImpl_OnMenuItemClickListener, action_, NSString *)

__attribute__((unused)) static void ASToolbarImpl_OnMenuItemClickListener_initWithASIWidget_withNSString_(ASToolbarImpl_OnMenuItemClickListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASToolbarImpl_OnMenuItemClickListener *new_ASToolbarImpl_OnMenuItemClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASToolbarImpl_OnMenuItemClickListener *create_ASToolbarImpl_OnMenuItemClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASToolbarImpl_OnMenuItemClickListener_initWithASIWidget_withNSString_withNSString_(ASToolbarImpl_OnMenuItemClickListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASToolbarImpl_OnMenuItemClickListener *new_ASToolbarImpl_OnMenuItemClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASToolbarImpl_OnMenuItemClickListener *create_ASToolbarImpl_OnMenuItemClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASToolbarImpl_OnMenuItemClickListener)


@interface ASToolbarImpl_$Lambda$1 : NSObject < JavaLangRunnable > {
 @public
  id<ASIWidget> val$widget_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASToolbarImpl_$Lambda$1)

__attribute__((unused)) static void ASToolbarImpl_$Lambda$1_initWithASIWidget_(ASToolbarImpl_$Lambda$1 *self, id<ASIWidget> capture$0);

__attribute__((unused)) static ASToolbarImpl_$Lambda$1 *new_ASToolbarImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASToolbarImpl_$Lambda$1 *create_ASToolbarImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0);


@interface ASToolbarImpl_$Lambda$2 : NSObject < ASToolbarImpl_ValueSetter >

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value;

@end

J2OBJC_STATIC_INIT(ASToolbarImpl_$Lambda$2)

inline ASToolbarImpl_$Lambda$2 *ASToolbarImpl_$Lambda$2_get_instance(void);
static ASToolbarImpl_$Lambda$2 *ASToolbarImpl_$Lambda$2_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASToolbarImpl_$Lambda$2, instance, ASToolbarImpl_$Lambda$2 *)

__attribute__((unused)) static void ASToolbarImpl_$Lambda$2_init(ASToolbarImpl_$Lambda$2 *self);

__attribute__((unused)) static ASToolbarImpl_$Lambda$2 *new_ASToolbarImpl_$Lambda$2_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASToolbarImpl_$Lambda$2 *create_ASToolbarImpl_$Lambda$2_init(void);


@interface ASToolbarImpl_$Lambda$3 : NSObject < ASToolbarImpl_ValueSetter >

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value;

@end

J2OBJC_STATIC_INIT(ASToolbarImpl_$Lambda$3)

inline ASToolbarImpl_$Lambda$3 *ASToolbarImpl_$Lambda$3_get_instance(void);
static ASToolbarImpl_$Lambda$3 *ASToolbarImpl_$Lambda$3_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASToolbarImpl_$Lambda$3, instance, ASToolbarImpl_$Lambda$3 *)

__attribute__((unused)) static void ASToolbarImpl_$Lambda$3_init(ASToolbarImpl_$Lambda$3 *self);

__attribute__((unused)) static ASToolbarImpl_$Lambda$3 *new_ASToolbarImpl_$Lambda$3_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASToolbarImpl_$Lambda$3 *create_ASToolbarImpl_$Lambda$3_init(void);


@interface ASToolbarImpl_$Lambda$4 : NSObject < ASToolbarImpl_ValueSetter >

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value;

@end

J2OBJC_STATIC_INIT(ASToolbarImpl_$Lambda$4)

inline ASToolbarImpl_$Lambda$4 *ASToolbarImpl_$Lambda$4_get_instance(void);
static ASToolbarImpl_$Lambda$4 *ASToolbarImpl_$Lambda$4_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASToolbarImpl_$Lambda$4, instance, ASToolbarImpl_$Lambda$4 *)

__attribute__((unused)) static void ASToolbarImpl_$Lambda$4_init(ASToolbarImpl_$Lambda$4 *self);

__attribute__((unused)) static ASToolbarImpl_$Lambda$4 *new_ASToolbarImpl_$Lambda$4_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASToolbarImpl_$Lambda$4 *create_ASToolbarImpl_$Lambda$4_init(void);


@interface ASToolbarImpl_$Lambda$5 : NSObject < ASToolbarImpl_ValueSetter >

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value;

@end

J2OBJC_STATIC_INIT(ASToolbarImpl_$Lambda$5)

inline ASToolbarImpl_$Lambda$5 *ASToolbarImpl_$Lambda$5_get_instance(void);
static ASToolbarImpl_$Lambda$5 *ASToolbarImpl_$Lambda$5_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASToolbarImpl_$Lambda$5, instance, ASToolbarImpl_$Lambda$5 *)

__attribute__((unused)) static void ASToolbarImpl_$Lambda$5_init(ASToolbarImpl_$Lambda$5 *self);

__attribute__((unused)) static ASToolbarImpl_$Lambda$5 *new_ASToolbarImpl_$Lambda$5_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASToolbarImpl_$Lambda$5 *create_ASToolbarImpl_$Lambda$5_init(void);


@interface ASToolbarImpl_$Lambda$6 : NSObject < ASToolbarImpl_ValueSetter >

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value;

@end

J2OBJC_STATIC_INIT(ASToolbarImpl_$Lambda$6)

inline ASToolbarImpl_$Lambda$6 *ASToolbarImpl_$Lambda$6_get_instance(void);
static ASToolbarImpl_$Lambda$6 *ASToolbarImpl_$Lambda$6_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASToolbarImpl_$Lambda$6, instance, ASToolbarImpl_$Lambda$6 *)

__attribute__((unused)) static void ASToolbarImpl_$Lambda$6_init(ASToolbarImpl_$Lambda$6 *self);

__attribute__((unused)) static ASToolbarImpl_$Lambda$6 *new_ASToolbarImpl_$Lambda$6_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASToolbarImpl_$Lambda$6 *create_ASToolbarImpl_$Lambda$6_init(void);


@interface ASToolbarImpl_$Lambda$7 : NSObject < ASToolbarImpl_ValueSetter >

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value;

@end

J2OBJC_STATIC_INIT(ASToolbarImpl_$Lambda$7)

inline ASToolbarImpl_$Lambda$7 *ASToolbarImpl_$Lambda$7_get_instance(void);
static ASToolbarImpl_$Lambda$7 *ASToolbarImpl_$Lambda$7_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASToolbarImpl_$Lambda$7, instance, ASToolbarImpl_$Lambda$7 *)

__attribute__((unused)) static void ASToolbarImpl_$Lambda$7_init(ASToolbarImpl_$Lambda$7 *self);

__attribute__((unused)) static ASToolbarImpl_$Lambda$7 *new_ASToolbarImpl_$Lambda$7_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASToolbarImpl_$Lambda$7 *create_ASToolbarImpl_$Lambda$7_init(void);


@interface ASToolbarImpl_$Lambda$8 : NSObject < ASToolbarImpl_ValueSetter >

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value;

@end

J2OBJC_STATIC_INIT(ASToolbarImpl_$Lambda$8)

inline ASToolbarImpl_$Lambda$8 *ASToolbarImpl_$Lambda$8_get_instance(void);
static ASToolbarImpl_$Lambda$8 *ASToolbarImpl_$Lambda$8_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASToolbarImpl_$Lambda$8, instance, ASToolbarImpl_$Lambda$8 *)

__attribute__((unused)) static void ASToolbarImpl_$Lambda$8_init(ASToolbarImpl_$Lambda$8 *self);

__attribute__((unused)) static ASToolbarImpl_$Lambda$8 *new_ASToolbarImpl_$Lambda$8_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASToolbarImpl_$Lambda$8 *create_ASToolbarImpl_$Lambda$8_init(void);


@interface ASToolbarImpl_$Lambda$9 : NSObject < ASToolbarImpl_ValueSetter >

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value;

@end

J2OBJC_STATIC_INIT(ASToolbarImpl_$Lambda$9)

inline ASToolbarImpl_$Lambda$9 *ASToolbarImpl_$Lambda$9_get_instance(void);
static ASToolbarImpl_$Lambda$9 *ASToolbarImpl_$Lambda$9_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASToolbarImpl_$Lambda$9, instance, ASToolbarImpl_$Lambda$9 *)

__attribute__((unused)) static void ASToolbarImpl_$Lambda$9_init(ASToolbarImpl_$Lambda$9 *self);

__attribute__((unused)) static ASToolbarImpl_$Lambda$9 *new_ASToolbarImpl_$Lambda$9_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASToolbarImpl_$Lambda$9 *create_ASToolbarImpl_$Lambda$9_init(void);


@interface ASToolbarImpl_$Lambda$10 : NSObject < ASToolbarImpl_ValueSetter >

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value;

@end

J2OBJC_STATIC_INIT(ASToolbarImpl_$Lambda$10)

inline ASToolbarImpl_$Lambda$10 *ASToolbarImpl_$Lambda$10_get_instance(void);
static ASToolbarImpl_$Lambda$10 *ASToolbarImpl_$Lambda$10_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASToolbarImpl_$Lambda$10, instance, ASToolbarImpl_$Lambda$10 *)

__attribute__((unused)) static void ASToolbarImpl_$Lambda$10_init(ASToolbarImpl_$Lambda$10 *self);

__attribute__((unused)) static ASToolbarImpl_$Lambda$10 *new_ASToolbarImpl_$Lambda$10_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASToolbarImpl_$Lambda$10 *create_ASToolbarImpl_$Lambda$10_init(void);


@interface ASToolbarImpl_$Lambda$11 : NSObject < ASToolbarImpl_ValueSetter >

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value;

@end

J2OBJC_STATIC_INIT(ASToolbarImpl_$Lambda$11)

inline ASToolbarImpl_$Lambda$11 *ASToolbarImpl_$Lambda$11_get_instance(void);
static ASToolbarImpl_$Lambda$11 *ASToolbarImpl_$Lambda$11_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASToolbarImpl_$Lambda$11, instance, ASToolbarImpl_$Lambda$11 *)

__attribute__((unused)) static void ASToolbarImpl_$Lambda$11_init(ASToolbarImpl_$Lambda$11 *self);

__attribute__((unused)) static ASToolbarImpl_$Lambda$11 *new_ASToolbarImpl_$Lambda$11_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASToolbarImpl_$Lambda$11 *create_ASToolbarImpl_$Lambda$11_init(void);


NSString *ASToolbarImpl_LOCAL_NAME = @"androidx.appcompat.widget.Toolbar";
NSString *ASToolbarImpl_GROUP_NAME = @"androidx.appcompat.widget.Toolbar";

@implementation ASToolbarImpl

@synthesize uiView = uiView_;

- (void)addPremeasureHandler {
  ASToolbarImpl_addPremeasureHandler(self);
}

- (void)loadAttributesWithNSString:(NSString *)localName {
  ASViewGroupImpl_register__WithNSString_(localName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"gravity"])) withTypeWithNSString:@"gravity"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"titleMargin"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"titleMarginStart"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"titleMarginEnd"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"titleMarginTop"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"titleMarginBottom"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"titleMargins"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"contentInsetStart"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"contentInsetEnd"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"contentInsetLeft"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"contentInsetRight"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"contentInsetStartWithNavigation"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"contentInsetEndWithActions"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxButtonHeight"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"buttonGravity"])) withTypeWithNSString:@"gravity"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"menu"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"actionLayoutEventIds"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"searchview_attributes"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onQueryTextSubmit"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onQueryTextChange"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"badgeNumbers"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"int"])) withOrderWithInt:10])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"menuItemIds"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"id"])) withOrderWithInt:-1])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"badgeAlphas"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"int"])) withOrderWithInt:10])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"badgeMaxCharacterCounts"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"int"])) withOrderWithInt:10])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"badgeGravities"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"gravity"])) withOrderWithInt:10])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"badgeHorizontalOffsets"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"dimension"])) withOrderWithInt:10])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"badgeVerticalOffsets"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"dimension"])) withOrderWithInt:10])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"badgeIsVisibles"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"boolean"])) withOrderWithInt:10])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"badgeBackgroundColors"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"colorint"])) withOrderWithInt:10])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"badgeTextColors"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"colorint"])) withOrderWithInt:10])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"badgeTextAppearanceResources"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"string"])) withOrderWithInt:10])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"title"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"titleTextColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"subtitle"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"subtitleTextColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"logo"])) withTypeWithNSString:@"drawable"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"navigationIcon"])) withTypeWithNSString:@"drawable"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"overflowIcon"])) withTypeWithNSString:@"drawable"])) withOrderWithInt:10]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onNavigationIconClick"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onMenuItemClick"])) withTypeWithNSString:@"string"])) withOrderWithInt:-1]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASToolbarImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASToolbarImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASToolbarImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (id<ASIWidget>)newInstance {
  return new_ASToolbarImpl_initWithNSString_withNSString_(groupName_, localName_);
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  toolbar_ = new_ASToolbarImpl_ToolbarExt_initWithASToolbarImpl_(self);
  [self nativeCreateWithJavaUtilMap:params];
  ASToolbarImpl_addPremeasureHandler(self);
  ASViewGroupImpl_registerCommandConveterWithASIWidget_(self);
  ASToolbarImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASToolbarImpl_setWidgetOnNativeClass(self);
}

- (id)asWidget {
  return toolbar_;
}

- (bool)removeWithASIWidget:(id<ASIWidget>)w {
  bool remove = [super removeWithASIWidget:w];
  [((ADXToolbar *) nil_chk(toolbar_)) removeViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])];
  ASToolbarImpl_nativeRemoveViewWithASIWidget_(self, w);
  return remove;
}

- (bool)removeWithInt:(int32_t)index {
  id<ASIWidget> widget = [((id<JavaUtilList>) nil_chk(widgets_)) getWithInt:index];
  bool remove = [super removeWithInt:index];
  if (index + 1 <= [((ADXToolbar *) nil_chk(toolbar_)) getChildCount]) {
    [((ADXToolbar *) nil_chk(toolbar_)) removeViewAtWithInt:index];
    ASToolbarImpl_nativeRemoveViewWithASIWidget_(self, widget);
  }
  return remove;
}

- (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget {
  ASToolbarImpl_nativeRemoveViewWithASIWidget_(self, widget);
}

- (void)addWithASIWidget:(id<ASIWidget>)w
                 withInt:(int32_t)index {
  if (index != -2) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
    ASToolbarImpl_createLayoutParamsWithADView_(self, view);
    if (index == -1) {
      [((ADXToolbar *) nil_chk(toolbar_)) addViewWithADView:view];
    }
    else {
      [((ADXToolbar *) nil_chk(toolbar_)) addViewWithADView:view withInt:index];
    }
  }
  ASViewGroupImpl_nativeAddViewWithId_withId_([self asNativeWidget], [((id<ASIWidget>) nil_chk(w)) asNativeWidget]);
  [super addWithASIWidget:w withInt:index];
}

- (void)createLayoutParamsWithADView:(ADView *)view {
  ASToolbarImpl_createLayoutParamsWithADView_(self, view);
}

- (ADXToolbar_LayoutParams *)getLayoutParamsWithADView:(ADView *)view {
  return ASToolbarImpl_getLayoutParamsWithADView_(self, view);
}

- (void)setChildAttributeWithASIWidget:(id<ASIWidget>)w
                 withASWidgetAttribute:(ASWidgetAttribute *)key
                          withNSString:(NSString *)strValue
                                withId:(id)objValue {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADXToolbar_LayoutParams *layoutParams = ASToolbarImpl_getLayoutParamsWithADView_(self, view);
  ASViewGroupImpl_setChildAttributeWithASIWidget_withASWidgetAttribute_withId_withId_(w, key, objValue, layoutParams);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height" }, 2)) {
    case 0:
    ((ADXToolbar_LayoutParams *) nil_chk(layoutParams))->width_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 1:
    ((ADXToolbar_LayoutParams *) nil_chk(layoutParams))->height_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    default:
    break;
  }
  [((ADView *) nil_chk(view)) setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
}

- (id)getChildAttributeWithASIWidget:(id<ASIWidget>)w
               withASWidgetAttribute:(ASWidgetAttribute *)key {
  id attributeValue = ASViewGroupImpl_getChildAttributeWithASIWidget_withASWidgetAttribute_(w, key);
  if (attributeValue != nil) {
    return attributeValue;
  }
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADXToolbar_LayoutParams *layoutParams = ASToolbarImpl_getLayoutParamsWithADView_(self, view);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height" }, 2)) {
    case 0:
    return JavaLangInteger_valueOfWithInt_(((ADXToolbar_LayoutParams *) nil_chk(layoutParams))->width_);
    case 1:
    return JavaLangInteger_valueOfWithInt_(((ADXToolbar_LayoutParams *) nil_chk(layoutParams))->height_);
  }
  return nil;
}

- (IOSClass *)getViewClass {
  return ASToolbarImpl_ToolbarExt_class_();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewGroupImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"gravity", @"titleMargin", @"titleMarginStart", @"titleMarginEnd", @"titleMarginTop", @"titleMarginBottom", @"titleMargins", @"contentInsetStart", @"contentInsetEnd", @"contentInsetLeft", @"contentInsetRight", @"contentInsetStartWithNavigation", @"contentInsetEndWithActions", @"maxButtonHeight", @"buttonGravity", @"menu", @"actionLayoutEventIds", @"searchview_attributes", @"onQueryTextSubmit", @"onQueryTextChange", @"badgeNumbers", @"menuItemIds", @"badgeAlphas", @"badgeMaxCharacterCounts", @"badgeGravities", @"badgeHorizontalOffsets", @"badgeVerticalOffsets", @"badgeIsVisibles", @"badgeBackgroundColors", @"badgeTextColors", @"badgeTextAppearanceResources", @"title", @"titleTextColor", @"subtitle", @"subtitleTextColor", @"logo", @"navigationIcon", @"overflowIcon", @"onNavigationIconClick", @"onMenuItemClick" }, 40)) {
    case 0:
    {
      ASToolbarImpl_setGravityWithId_(self, objValue);
    }
    break;
    case 1:
    {
      ASToolbarImpl_setTitleMarginWithId_(self, objValue);
    }
    break;
    case 2:
    {
      [((ADXToolbar *) nil_chk(toolbar_)) setTitleMarginStartWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 3:
    {
      [((ADXToolbar *) nil_chk(toolbar_)) setTitleMarginEndWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 4:
    {
      [((ADXToolbar *) nil_chk(toolbar_)) setTitleMarginTopWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 5:
    {
      [((ADXToolbar *) nil_chk(toolbar_)) setTitleMarginBottomWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 6:
    {
      ASToolbarImpl_setTitleMarginWithId_(self, objValue);
    }
    break;
    case 7:
    {
      ASToolbarImpl_setContentInsetStartWithId_(self, objValue);
    }
    break;
    case 8:
    {
      ASToolbarImpl_setContentInsetEndWithId_(self, objValue);
    }
    break;
    case 9:
    {
      ASToolbarImpl_setContentInsetStartWithId_(self, objValue);
    }
    break;
    case 10:
    {
      ASToolbarImpl_setContentInsetEndWithId_(self, objValue);
    }
    break;
    case 11:
    {
      [((ADXToolbar *) nil_chk(toolbar_)) setContentInsetStartWithNavigationWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 12:
    {
      [((ADXToolbar *) nil_chk(toolbar_)) setContentInsetEndWithActionsWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 13:
    {
      ASToolbarImpl_setMaxButtonHeightWithId_(self, objValue);
    }
    break;
    case 14:
    {
      ASToolbarImpl_setButtonGravityWithId_(self, objValue);
    }
    break;
    case 15:
    {
      ASToolbarImpl_setMenuWithId_(self, objValue);
    }
    break;
    case 16:
    {
      ASToolbarImpl_setActionLayoutEventIdsWithId_(self, objValue);
    }
    break;
    case 17:
    {
      ASToolbarImpl_setSearchviewAttributesWithId_(self, objValue);
    }
    break;
    case 18:
    {
      ASToolbarImpl_setOnQueryTextListenerWithNSString_withNSString_withId_(self, @"onQueryTextSubmit", strValue, objValue);
    }
    break;
    case 19:
    {
      ASToolbarImpl_setOnQueryTextListenerWithNSString_withNSString_withId_(self, @"onQueryTextChange", strValue, objValue);
    }
    break;
    case 20:
    {
      ASToolbarImpl_setBadgeNumbersWithId_(self, objValue);
    }
    break;
    case 21:
    {
      ASToolbarImpl_setBadgeMenuItemIdsWithId_(self, objValue);
    }
    break;
    case 22:
    {
      ASToolbarImpl_setBadgeAlphasWithId_(self, objValue);
    }
    break;
    case 23:
    {
      ASToolbarImpl_setBadgeMaxCharacterCountsWithId_(self, objValue);
    }
    break;
    case 24:
    {
      ASToolbarImpl_setBadgeGravitiesWithId_(self, objValue);
    }
    break;
    case 25:
    {
      ASToolbarImpl_setBadgeHorizontalOffsetsWithId_(self, objValue);
    }
    break;
    case 26:
    {
      ASToolbarImpl_setBadgeVerticalOffsetsWithId_(self, objValue);
    }
    break;
    case 27:
    {
      ASToolbarImpl_setBadgeIsVisiblesWithId_(self, objValue);
    }
    break;
    case 28:
    {
      ASToolbarImpl_setBadgeBackgroundColorsWithId_(self, objValue);
    }
    break;
    case 29:
    {
      ASToolbarImpl_setBadgeTextColorsWithId_(self, objValue);
    }
    break;
    case 30:
    {
      ASToolbarImpl_setTextAppearanceResourcesWithId_(self, objValue);
    }
    break;
    case 31:
    {
      ASToolbarImpl_setTitleWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
    }
    break;
    case 32:
    {
      ASToolbarImpl_setTitleTextColorWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
    }
    break;
    case 33:
    {
      ASToolbarImpl_setSubtitleWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
    }
    break;
    case 34:
    {
      ASToolbarImpl_setSubtitleColorWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
    }
    break;
    case 35:
    {
      ASToolbarImpl_setLogoWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
    }
    break;
    case 36:
    {
      ASToolbarImpl_setNavigationIconWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
    }
    break;
    case 37:
    {
      ASToolbarImpl_setOverflowIconWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
    }
    break;
    case 38:
    {
      ASToolbarImpl_setNavigationOnClickListenerWithASToolbarImpl_OnClickListener_(self, new_ASToolbarImpl_OnClickListener_initWithASIWidget_withNSString_(self, strValue));
    }
    break;
    case 39:
    {
      ASToolbarImpl_setOnMenuItemClickListenerWithNSString_withId_(self, strValue, objValue);
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id attributeValue = ASViewGroupImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(self, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){  }, 0)) {
  }
  return nil;
}

- (id)asNativeWidget {
  return uiView_;
}

- (bool)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASUIView* uiView = [ASUIView new];
  uiView.backgroundColor = [UIColor clearColor];
  uiView_ = uiView;
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)setTitleWithASWidgetAttribute:(ASWidgetAttribute *)key
                         withNSString:(NSString *)strValue
                               withId:(id)objValue
            withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASToolbarImpl_setTitleWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (void)initTitle {
  ASToolbarImpl_initTitle(self);
}

- (void)setSubtitleColorWithASWidgetAttribute:(ASWidgetAttribute *)key
                                 withNSString:(NSString *)strValue
                                       withId:(id)objValue
                    withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASToolbarImpl_setSubtitleColorWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (void)setTitleTextColorWithASWidgetAttribute:(ASWidgetAttribute *)key
                                  withNSString:(NSString *)strValue
                                        withId:(id)objValue
                     withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASToolbarImpl_setTitleTextColorWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (void)setSubtitleWithASWidgetAttribute:(ASWidgetAttribute *)key
                            withNSString:(NSString *)strValue
                                  withId:(id)objValue
               withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASToolbarImpl_setSubtitleWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (void)initSubTitle {
  ASToolbarImpl_initSubTitle(self);
}

- (void)setLogoWithASWidgetAttribute:(ASWidgetAttribute *)key
                        withNSString:(NSString *)strValue
                              withId:(id)objValue
           withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASToolbarImpl_setLogoWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (void)setNavigationIconWithASWidgetAttribute:(ASWidgetAttribute *)key
                                  withNSString:(NSString *)strValue
                                        withId:(id)objValue
                     withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASToolbarImpl_setNavigationIconWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (void)setMenuWithId:(id)objValue {
  ASToolbarImpl_setMenuWithId_(self, objValue);
}

- (void)createMenu {
  ASToolbarImpl_createMenu(self);
}

- (void)parseMenuWithNSString:(NSString *)menuId
                   withADMenu:(id<ADMenu>)menu
             withASHasWidgets:(id<ASHasWidgets>)parent {
  ASToolbarImpl_parseMenuWithNSString_withADMenu_withASHasWidgets_(self, menuId, menu, parent);
}

- (id<ADXToolbar_OnMenuItemClickListener>)getOnMenuItemClickListener {
  return onMenuItemClickListener_;
}

- (void)setOnMenuItemClickListenerWithNSString:(NSString *)strValue
                                        withId:(id)objValue {
  ASToolbarImpl_setOnMenuItemClickListenerWithNSString_withId_(self, strValue, objValue);
}

- (void)setOverflowIconWithASWidgetAttribute:(ASWidgetAttribute *)key
                                withNSString:(NSString *)strValue
                                      withId:(id)objValue
                   withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASToolbarImpl_setOverflowIconWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (void)setGravityWithId:(id)objValue {
  ASToolbarImpl_setGravityWithId_(self, objValue);
}

- (void)setMaxButtonHeightWithId:(id)objValue {
  ASToolbarImpl_setMaxButtonHeightWithId_(self, objValue);
}

- (void)setButtonGravityWithId:(id)objValue {
  ASToolbarImpl_setButtonGravityWithId_(self, objValue);
}

- (void)handlePreMeasureWithId:(id)payload {
  ASToolbarImpl_handlePreMeasureWithId_(self, payload);
}

- (void)initialized {
  [super initialized];
  if (self->actionLayoutEventIds_ != nil || searchviewAttributes_ != nil) {
    int32_t menuSize = [((ADXMenuBuilder *) nil_chk([((ADXToolbar *) nil_chk(toolbar_)) getMenu])) size];
    for (int32_t i = 0; i < menuSize; i++) {
      id<ADMenuItem> menu = [((ADXMenuBuilder *) nil_chk([((ADXToolbar *) nil_chk(toolbar_)) getMenu])) getItemWithInt:i];
      if (self->actionLayoutEventIds_ != nil && [((id<ADMenuItem>) nil_chk(menu)) getActionView] != nil && !([[menu getActionView] isKindOfClass:[ADXSearchView class]])) {
        for (NSString * __strong actionLayoutEventId in self->actionLayoutEventIds_) {
          actionLayoutEventId = [((NSString *) nil_chk([((NSString *) nil_chk(actionLayoutEventId)) java_replace:@"@+id/" withSequence:@""])) java_replace:@"@id/" withSequence:@""];
          NSString *myactionLayoutEventId = actionLayoutEventId;
          ADView *view = [((ADView *) nil_chk([((id<ADMenuItem>) nil_chk(menu)) getActionView])) findViewByIdWithInt:ASIdGenerator_getIdWithNSString_(JreStrcat("$$", @"@+id/", myactionLayoutEventId))];
          if (view != nil) {
            [view setMyAttributeWithNSString:@"onClick" withId:new_ASToolbarImpl_1_initWithASToolbarImpl_withADMenuItem_withNSString_(self, menu, myactionLayoutEventId)];
          }
        }
      }
      else if (searchviewAttributes_ != nil && [((id<ADMenuItem>) nil_chk(menu)) getActionView] != nil && ([[menu getActionView] isKindOfClass:[ADXSearchView class]])) {
        ASToolbarImpl_applySearchViewAttributesWithADMenuItem_(self, menu);
      }
    }
  }
}

- (id<ASIWidget>)getAutoCompleteImplWithADAutoCompleteTextView:(ADAutoCompleteTextView *)autoComplete {
  return ASToolbarImpl_getAutoCompleteImplWithADAutoCompleteTextView_(self, autoComplete);
}

- (void)setOnSuggestionListenerWithADMenuItem:(id<ADMenuItem>)menu
                   withADAutoCompleteTextView:(ADAutoCompleteTextView *)autoComplete {
  ASToolbarImpl_setOnSuggestionListenerWithADMenuItem_withADAutoCompleteTextView_(self, menu, autoComplete);
}

- (ADXBadgeDrawable *)getOrCreateBadgeWithInt:(int32_t)id_ {
  return ASToolbarImpl_getOrCreateBadgeWithInt_(self, id_);
}

- (void)reapplyBadgeDrawables {
  ASToolbarImpl_reapplyBadgeDrawables(self);
}

- (void)setContentInsetEndWithId:(id)objValue {
  ASToolbarImpl_setContentInsetEndWithId_(self, objValue);
}

- (void)setContentInsetStartWithId:(id)objValue {
  ASToolbarImpl_setContentInsetStartWithId_(self, objValue);
}

- (void)setTitleMarginWithId:(id)objValue {
  ASToolbarImpl_setTitleMarginWithId_(self, objValue);
}

- (void)setOnQueryTextListenerWithNSString:(NSString *)action
                              withNSString:(NSString *)strValue
                                    withId:(id)objValue {
  ASToolbarImpl_setOnQueryTextListenerWithNSString_withNSString_withId_(self, action, strValue, objValue);
}

- (void)setActionLayoutEventIdsWithId:(id)objValue {
  ASToolbarImpl_setActionLayoutEventIdsWithId_(self, objValue);
}

- (void)applySearchViewAttributesWithADMenuItem:(id<ADMenuItem>)menu {
  ASToolbarImpl_applySearchViewAttributesWithADMenuItem_(self, menu);
}

- (ADAutoCompleteTextView *)findAutoCompleteWithADViewGroup:(ADViewGroup *)actionView {
  return ASToolbarImpl_findAutoCompleteWithADViewGroup_(self, actionView);
}

- (void)setSearchviewAttributesWithId:(id)objValue {
  ASToolbarImpl_setSearchviewAttributesWithId_(self, objValue);
}

- (void)setBadgeBackgroundColorsWithId:(id)objValue {
  ASToolbarImpl_setBadgeBackgroundColorsWithId_(self, objValue);
}

- (void)setValueOnBadgeDrawableWithId:(id)objValue
        withASToolbarImpl_ValueSetter:(id<ASToolbarImpl_ValueSetter>)valueSetter {
  ASToolbarImpl_setValueOnBadgeDrawableWithId_withASToolbarImpl_ValueSetter_(self, objValue, valueSetter);
}

- (void)setBadgeMenuItemIdsWithId:(id)objValue {
  ASToolbarImpl_setBadgeMenuItemIdsWithId_(self, objValue);
}

- (void)setBadgeNumbersWithId:(id)objValue {
  ASToolbarImpl_setBadgeNumbersWithId_(self, objValue);
}

- (void)setBadgeVerticalOffsetsWithId:(id)objValue {
  ASToolbarImpl_setBadgeVerticalOffsetsWithId_(self, objValue);
}

- (void)setBadgeHorizontalOffsetsWithId:(id)objValue {
  ASToolbarImpl_setBadgeHorizontalOffsetsWithId_(self, objValue);
}

- (void)setBadgeGravitiesWithId:(id)objValue {
  ASToolbarImpl_setBadgeGravitiesWithId_(self, objValue);
}

- (void)setBadgeMaxCharacterCountsWithId:(id)objValue {
  ASToolbarImpl_setBadgeMaxCharacterCountsWithId_(self, objValue);
}

- (void)setBadgeAlphasWithId:(id)objValue {
  ASToolbarImpl_setBadgeAlphasWithId_(self, objValue);
}

- (void)setBadgeTextColorsWithId:(id)objValue {
  ASToolbarImpl_setBadgeTextColorsWithId_(self, objValue);
}

- (void)setBadgeIsVisiblesWithId:(id)objValue {
  ASToolbarImpl_setBadgeIsVisiblesWithId_(self, objValue);
}

- (void)setTextAppearanceResourcesWithId:(id)objValue {
  ASToolbarImpl_setTextAppearanceResourcesWithId_(self, objValue);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADXToolbar *) nil_chk(toolbar_)) setIdWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:id_ withNSString:@"id"], [JavaLangInteger class]))) intValue]];
  }
}

- (void)setVisibleWithBoolean:(bool)b {
  [((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) setVisibilityWithInt:b ? ADView_VISIBLE : ADView_GONE];
}

- (void)setNavigationOnClickListenerWithASToolbarImpl_OnClickListener:(ASToolbarImpl_OnClickListener *)onClickListener {
  ASToolbarImpl_setNavigationOnClickListenerWithASToolbarImpl_OnClickListener_(self, onClickListener);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "LADXToolbar_LayoutParams;", 0x2, 14, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 23, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 24, 25, -1, 26, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 31, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 32, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 35, 36, -1, -1, -1, -1 },
    { NULL, "LADXToolbar_OnMenuItemClickListener;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 37, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 39, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 41, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 42, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 43, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x2, 44, 45, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 46, 47, -1, -1, -1, -1 },
    { NULL, "LADXBadgeDrawable;", 0x2, 48, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 49, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 50, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 51, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 52, 53, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 54, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 55, 56, -1, -1, -1, -1 },
    { NULL, "LADAutoCompleteTextView;", 0x2, 57, 58, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 59, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 60, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 61, 62, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 63, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 64, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 65, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 66, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 67, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 68, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 69, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 70, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 71, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 72, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 73, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 74, 75, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 76, 77, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(addPremeasureHandler);
  methods[1].selector = @selector(loadAttributesWithNSString:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(initWithNSString:);
  methods[4].selector = @selector(initWithNSString:withNSString:);
  methods[5].selector = @selector(newInstance);
  methods[6].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[7].selector = @selector(setWidgetOnNativeClass);
  methods[8].selector = @selector(asWidget);
  methods[9].selector = @selector(removeWithASIWidget:);
  methods[10].selector = @selector(removeWithInt:);
  methods[11].selector = @selector(nativeRemoveViewWithASIWidget:);
  methods[12].selector = @selector(addWithASIWidget:withInt:);
  methods[13].selector = @selector(createLayoutParamsWithADView:);
  methods[14].selector = @selector(getLayoutParamsWithADView:);
  methods[15].selector = @selector(setChildAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:);
  methods[16].selector = @selector(getChildAttributeWithASIWidget:withASWidgetAttribute:);
  methods[17].selector = @selector(getViewClass);
  methods[18].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[19].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[20].selector = @selector(asNativeWidget);
  methods[21].selector = @selector(checkIosVersionWithNSString:);
  methods[22].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[23].selector = @selector(requestLayout);
  methods[24].selector = @selector(invalidate);
  methods[25].selector = @selector(setTitleWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[26].selector = @selector(initTitle);
  methods[27].selector = @selector(setSubtitleColorWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[28].selector = @selector(setTitleTextColorWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[29].selector = @selector(setSubtitleWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[30].selector = @selector(initSubTitle);
  methods[31].selector = @selector(setLogoWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[32].selector = @selector(setNavigationIconWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[33].selector = @selector(setMenuWithId:);
  methods[34].selector = @selector(createMenu);
  methods[35].selector = @selector(parseMenuWithNSString:withADMenu:withASHasWidgets:);
  methods[36].selector = @selector(getOnMenuItemClickListener);
  methods[37].selector = @selector(setOnMenuItemClickListenerWithNSString:withId:);
  methods[38].selector = @selector(setOverflowIconWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[39].selector = @selector(setGravityWithId:);
  methods[40].selector = @selector(setMaxButtonHeightWithId:);
  methods[41].selector = @selector(setButtonGravityWithId:);
  methods[42].selector = @selector(handlePreMeasureWithId:);
  methods[43].selector = @selector(initialized);
  methods[44].selector = @selector(getAutoCompleteImplWithADAutoCompleteTextView:);
  methods[45].selector = @selector(setOnSuggestionListenerWithADMenuItem:withADAutoCompleteTextView:);
  methods[46].selector = @selector(getOrCreateBadgeWithInt:);
  methods[47].selector = @selector(reapplyBadgeDrawables);
  methods[48].selector = @selector(setContentInsetEndWithId:);
  methods[49].selector = @selector(setContentInsetStartWithId:);
  methods[50].selector = @selector(setTitleMarginWithId:);
  methods[51].selector = @selector(setOnQueryTextListenerWithNSString:withNSString:withId:);
  methods[52].selector = @selector(setActionLayoutEventIdsWithId:);
  methods[53].selector = @selector(applySearchViewAttributesWithADMenuItem:);
  methods[54].selector = @selector(findAutoCompleteWithADViewGroup:);
  methods[55].selector = @selector(setSearchviewAttributesWithId:);
  methods[56].selector = @selector(setBadgeBackgroundColorsWithId:);
  methods[57].selector = @selector(setValueOnBadgeDrawableWithId:withASToolbarImpl_ValueSetter:);
  methods[58].selector = @selector(setBadgeMenuItemIdsWithId:);
  methods[59].selector = @selector(setBadgeNumbersWithId:);
  methods[60].selector = @selector(setBadgeVerticalOffsetsWithId:);
  methods[61].selector = @selector(setBadgeHorizontalOffsetsWithId:);
  methods[62].selector = @selector(setBadgeGravitiesWithId:);
  methods[63].selector = @selector(setBadgeMaxCharacterCountsWithId:);
  methods[64].selector = @selector(setBadgeAlphasWithId:);
  methods[65].selector = @selector(setBadgeTextColorsWithId:);
  methods[66].selector = @selector(setBadgeIsVisiblesWithId:);
  methods[67].selector = @selector(setTextAppearanceResourcesWithId:);
  methods[68].selector = @selector(setIdWithNSString:);
  methods[69].selector = @selector(setVisibleWithBoolean:);
  methods[70].selector = @selector(setNavigationOnClickListenerWithASToolbarImpl_OnClickListener:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 78, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 79, -1, -1 },
    { "toolbar_", "LADXToolbar;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "PREMEASURE_EVENT_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "titleView_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "subtitleView_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "logo_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "navigationIcon_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "actionMenuView_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "menu_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onMenuItemClickListener_", "LADXToolbar_OnMenuItemClickListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "overflowIcon_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mButtonGravity_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "screenWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "badgeDrawables_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 80, -1 },
    { "onQueryTextSubmit_", "LADXSearchView_OnQueryTextListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onQueryTextChange_", "LADXSearchView_OnQueryTextListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "actionLayoutEventIds_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 81, -1 },
    { "searchviewAttributes_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 82, -1 },
    { "badgeMenuItemIds_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 83, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "remove", "LASIWidget;", "I", "nativeRemoveView", "add", "LASIWidget;I", "createLayoutParams", "LADView;", "getLayoutParams", "setChildAttribute", "LASIWidget;LASWidgetAttribute;LNSString;LNSObject;", "getChildAttribute", "LASIWidget;LASWidgetAttribute;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "checkIosVersion", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setTitle", "setSubtitleColor", "setTitleTextColor", "setSubtitle", "setLogo", "setNavigationIcon", "setMenu", "LNSObject;", "parseMenu", "LNSString;LADMenu;LASHasWidgets;", "setOnMenuItemClickListener", "LNSString;LNSObject;", "setOverflowIcon", "setGravity", "setMaxButtonHeight", "setButtonGravity", "handlePreMeasure", "getAutoCompleteImpl", "LADAutoCompleteTextView;", "setOnSuggestionListener", "LADMenuItem;LADAutoCompleteTextView;", "getOrCreateBadge", "setContentInsetEnd", "setContentInsetStart", "setTitleMargin", "setOnQueryTextListener", "LNSString;LNSString;LNSObject;", "setActionLayoutEventIds", "applySearchViewAttributes", "LADMenuItem;", "findAutoComplete", "LADViewGroup;", "setSearchviewAttributes", "setBadgeBackgroundColors", "setValueOnBadgeDrawable", "LNSObject;LASToolbarImpl_ValueSetter;", "setBadgeMenuItemIds", "setBadgeNumbers", "setBadgeVerticalOffsets", "setBadgeHorizontalOffsets", "setBadgeGravities", "setBadgeMaxCharacterCounts", "setBadgeAlphas", "setBadgeTextColors", "setBadgeIsVisibles", "setTextAppearanceResources", "setId", "setVisible", "Z", "setNavigationOnClickListener", "LASToolbarImpl_OnClickListener;", &ASToolbarImpl_LOCAL_NAME, &ASToolbarImpl_GROUP_NAME, "Ljava/util/Map<Ljava/lang/Integer;Lcom/google/android/material/badge/BadgeDrawable;>;", "Ljava/util/List<Ljava/lang/String;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "Ljava/util/List<Ljava/lang/Object;>;", "LASToolbarImpl_PreMeasureHandler;LASToolbarImpl_ToolbarExt;LASToolbarImpl_ValueSetter;LASToolbarImpl_OnQueryTextListener;LASToolbarImpl_OnClickListener;LASToolbarImpl_OnMenuItemClickListener;" };
  static const J2ObjcClassInfo _ASToolbarImpl = { "ToolbarImpl", "com.ashera.toolbar", ptrTable, methods, fields, 7, 0x1, 71, 21, -1, 84, -1, -1, -1 };
  return &_ASToolbarImpl;
}

@end

void ASToolbarImpl_addPremeasureHandler(ASToolbarImpl *self) {
  [((ASEventBus *) nil_chk([((id<ASIFragment>) nil_chk(self->fragment_)) getEventBus])) onWithNSString:self->PREMEASURE_EVENT_ withASEventBusHandlerArray:[IOSObjectArray newArrayWithObjects:(id[]){ create_ASToolbarImpl_PreMeasureHandler_initWithASToolbarImpl_withNSString_(self, self->PREMEASURE_EVENT_) } count:1 type:ASEventBusHandler_class_()]];
}

void ASToolbarImpl_init(ASToolbarImpl *self) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASToolbarImpl_GROUP_NAME, ASToolbarImpl_LOCAL_NAME);
  self->PREMEASURE_EVENT_ = [((ASEvent_StandardEvents *) nil_chk(JreLoadEnum(ASEvent_StandardEvents, preMeasure))) description];
  self->mButtonGravity_ = ADGravity_TOP;
  self->screenWidth_ = -1;
}

ASToolbarImpl *new_ASToolbarImpl_init() {
  J2OBJC_NEW_IMPL(ASToolbarImpl, init)
}

ASToolbarImpl *create_ASToolbarImpl_init() {
  J2OBJC_CREATE_IMPL(ASToolbarImpl, init)
}

void ASToolbarImpl_initWithNSString_(ASToolbarImpl *self, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASToolbarImpl_GROUP_NAME, localname);
  self->PREMEASURE_EVENT_ = [((ASEvent_StandardEvents *) nil_chk(JreLoadEnum(ASEvent_StandardEvents, preMeasure))) description];
  self->mButtonGravity_ = ADGravity_TOP;
  self->screenWidth_ = -1;
}

ASToolbarImpl *new_ASToolbarImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASToolbarImpl, initWithNSString_, localname)
}

ASToolbarImpl *create_ASToolbarImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASToolbarImpl, initWithNSString_, localname)
}

void ASToolbarImpl_initWithNSString_withNSString_(ASToolbarImpl *self, NSString *groupName, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, groupName, localname);
  self->PREMEASURE_EVENT_ = [((ASEvent_StandardEvents *) nil_chk(JreLoadEnum(ASEvent_StandardEvents, preMeasure))) description];
  self->mButtonGravity_ = ADGravity_TOP;
  self->screenWidth_ = -1;
}

ASToolbarImpl *new_ASToolbarImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASToolbarImpl, initWithNSString_withNSString_, groupName, localname)
}

ASToolbarImpl *create_ASToolbarImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASToolbarImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASToolbarImpl_setWidgetOnNativeClass(ASToolbarImpl *self) {
  ((ASUIView*) [self asNativeWidget]).widget = self;
}

void ASToolbarImpl_nativeRemoveViewWithASIWidget_(ASToolbarImpl *self, id<ASIWidget> widget) {
  ADLayoutTransition *layoutTransition = [((ADXToolbar *) nil_chk(self->toolbar_)) getLayoutTransition];
  if (layoutTransition != nil && ([layoutTransition isTransitionTypeEnabledWithInt:ADLayoutTransition_CHANGE_DISAPPEARING] || [layoutTransition isTransitionTypeEnabledWithInt:ADLayoutTransition_DISAPPEARING])) {
    [self addToBufferedRunnablesWithJavaLangRunnable:new_ASToolbarImpl_$Lambda$1_initWithASIWidget_(widget)];
  }
  else {
    ASViewGroupImpl_nativeRemoveViewWithASIWidget_(widget);
  }
}

void ASToolbarImpl_createLayoutParamsWithADView_(ASToolbarImpl *self, ADView *view) {
  ADXToolbar_LayoutParams *layoutParams = (ADXToolbar_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXToolbar_LayoutParams class]);
  layoutParams = (ADXToolbar_LayoutParams *) cast_chk([view getLayoutParams], [ADXToolbar_LayoutParams class]);
  if (layoutParams == nil) {
    layoutParams = new_ADXToolbar_LayoutParams_initWithInt_withInt_(-2, -2);
    [view setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
  }
  else {
    layoutParams->height_ = -2;
    layoutParams->width_ = -2;
  }
}

ADXToolbar_LayoutParams *ASToolbarImpl_getLayoutParamsWithADView_(ASToolbarImpl *self, ADView *view) {
  return (ADXToolbar_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXToolbar_LayoutParams class]);
}

void ASToolbarImpl_setTitleWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASToolbarImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  ASToolbarImpl_initTitle(self);
  [((id<ASIWidget>) nil_chk(self->titleView_)) setAttributeWithASWidgetAttribute:ASWidgetFactory_getAttributeWithNSString_withNSString_(@"TextView", @"text") withNSString:strValue withId:objValue withASILifeCycleDecorator:decorator];
  if ([self isInitialised]) {
    [((id<ASIWidget>) nil_chk(self->titleView_)) requestLayout];
  }
}

void ASToolbarImpl_initTitle(ASToolbarImpl *self) {
  if (self->titleView_ == nil) {
    self->titleView_ = ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(@"TextView", @"Toolbar_titleView", self, true);
    [((ADXToolbar *) nil_chk(self->toolbar_)) setTitleTextViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(self->titleView_)) asWidget], [ADView class])];
  }
}

void ASToolbarImpl_setSubtitleColorWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASToolbarImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  ASToolbarImpl_initSubTitle(self);
  [((id<ASIWidget>) nil_chk(self->subtitleView_)) setAttributeWithASWidgetAttribute:ASWidgetFactory_getAttributeWithNSString_withNSString_(@"TextView", @"textColor") withNSString:strValue withId:objValue withASILifeCycleDecorator:decorator];
}

void ASToolbarImpl_setTitleTextColorWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASToolbarImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  ASToolbarImpl_initTitle(self);
  [((id<ASIWidget>) nil_chk(self->titleView_)) setAttributeWithASWidgetAttribute:ASWidgetFactory_getAttributeWithNSString_withNSString_(@"TextView", @"textColor") withNSString:strValue withId:objValue withASILifeCycleDecorator:decorator];
}

void ASToolbarImpl_setSubtitleWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASToolbarImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  ASToolbarImpl_initSubTitle(self);
  [((id<ASIWidget>) nil_chk(self->subtitleView_)) setAttributeWithASWidgetAttribute:ASWidgetFactory_getAttributeWithNSString_withNSString_(@"TextView", @"text") withNSString:strValue withId:objValue withASILifeCycleDecorator:decorator];
  if ([self isInitialised]) {
    [((id<ASIWidget>) nil_chk(self->subtitleView_)) requestLayout];
  }
}

void ASToolbarImpl_initSubTitle(ASToolbarImpl *self) {
  if (self->subtitleView_ == nil) {
    self->subtitleView_ = ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(@"TextView", @"Toolbar_subtitleView", self, true);
    [((ADXToolbar *) nil_chk(self->toolbar_)) setSubtitleTextViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(self->subtitleView_)) asWidget], [ADView class])];
  }
}

void ASToolbarImpl_setLogoWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASToolbarImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  if (self->logo_ == nil) {
    self->logo_ = ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(@"ImageView", @"Toolbar_logoView", self, true);
    [((ADXToolbar *) nil_chk(self->toolbar_)) setLogoViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(self->logo_)) asWidget], [ADView class])];
  }
  [((id<ASIWidget>) nil_chk(self->logo_)) setAttributeWithASWidgetAttribute:ASWidgetFactory_getAttributeWithNSString_withNSString_(@"ImageView", @"src") withNSString:strValue withId:objValue withASILifeCycleDecorator:decorator];
  if ([self isInitialised]) {
    [((id<ASIWidget>) nil_chk(self->logo_)) requestLayout];
  }
}

void ASToolbarImpl_setNavigationIconWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASToolbarImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  if (self->navigationIcon_ == nil) {
    self->navigationIcon_ = ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(@"ImageView", @"Toolbar_navigationIcon", self, true);
    [((ADXToolbar *) nil_chk(self->toolbar_)) setNavigationIconWithASBaseMeasurableImageView:(ASBaseMeasurableImageView *) cast_chk([((id<ASIWidget>) nil_chk(self->navigationIcon_)) asWidget], [ASBaseMeasurableImageView class])];
  }
  [((id<ASIWidget>) nil_chk(self->navigationIcon_)) setAttributeWithASWidgetAttribute:ASWidgetFactory_getAttributeWithNSString_withNSString_(@"ImageView", @"src") withNSString:strValue withId:objValue withASILifeCycleDecorator:decorator];
  if ([self isInitialised]) {
    [((id<ASIWidget>) nil_chk(self->navigationIcon_)) requestLayout];
  }
}

void ASToolbarImpl_setMenuWithId_(ASToolbarImpl *self, id objValue) {
  self->menu_ = (NSString *) cast_chk(objValue, [NSString class]);
  ASToolbarImpl_createMenu(self);
}

void ASToolbarImpl_createMenu(ASToolbarImpl *self) {
  if (self->menu_ != nil) {
    if (self->actionMenuView_ != nil) {
      [self removeWithASIWidget:self->actionMenuView_];
      self->actionMenuView_ = nil;
    }
    if (self->actionMenuView_ == nil) {
      self->actionMenuView_ = ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(ASActionMenuViewImpl_LOCAL_NAME, @"Toolbar_actionMenuView", self, true);
      [((ADXToolbar *) nil_chk(self->toolbar_)) setMenuViewWithADView:(ADXActionMenuView *) cast_chk([((id<ASIWidget>) nil_chk(self->actionMenuView_)) asWidget], [ADXActionMenuView class])];
      ADXToolbar_LayoutParams *lp = (ADXToolbar_LayoutParams *) cast_chk([((ADXActionMenuView *) nil_chk(((ADXActionMenuView *) cast_chk([((id<ASIWidget>) nil_chk(self->actionMenuView_)) asWidget], [ADXActionMenuView class])))) getLayoutParams], [ADXToolbar_LayoutParams class]);
      ((ADXToolbar_LayoutParams *) nil_chk(lp))->gravity_ = ADXGravityCompat_END | (self->mButtonGravity_ & ADGravity_VERTICAL_GRAVITY_MASK);
    }
    ADXActionMenuView *actionMenu = (ADXActionMenuView *) cast_chk([((id<ASIWidget>) nil_chk(self->actionMenuView_)) asWidget], [ADXActionMenuView class]);
    ASToolbarImpl_parseMenuWithNSString_withADMenu_withASHasWidgets_(self, self->menu_, [((ADXActionMenuView *) nil_chk(actionMenu)) getMenu], (id<ASHasWidgets>) cast_check(self->actionMenuView_, ASHasWidgets_class_()));
    [actionMenu updateMenuView];
    id<ASIWidget> overFlowButton = [((ASActionMenuViewImpl *) nil_chk(((ASActionMenuViewImpl *) cast_chk(self->actionMenuView_, [ASActionMenuViewImpl class])))) getOverFlowButtonWidget];
    if (overFlowButton != nil && self->overflowIcon_ != nil) {
      [overFlowButton setAttributeWithNSString:@"src" withId:self->overflowIcon_ withBoolean:false];
    }
    [((id<ASIWidget>) nil_chk(self->actionMenuView_)) initialized];
    ASToolbarImpl_reapplyBadgeDrawables(self);
  }
}

void ASToolbarImpl_parseMenuWithNSString_withADMenu_withASHasWidgets_(ASToolbarImpl *self, NSString *menuId, id<ADMenu> menu, id<ASHasWidgets> parent) {
  NSString *inlineResource = [((id<ASIFragment>) nil_chk(self->fragment_)) getInlineResourceWithNSString:menuId];
  NSString *json;
  if (inlineResource != nil) {
    json = ASPluginInvoker_xml2jsonWithNSString_withASIFragment_(inlineResource, self->fragment_);
  }
  else {
    NSString *key = [((NSString *) nil_chk(menuId)) java_replace:@"@menu/" withSequence:@""];
    json = ASResourceBundleUtils_getStringWithNSString_withNSString_withASIFragment_(@"menu/menu", key, self->fragment_);
  }
  ADXMenuParser_parseMenuWithASHasWidgets_withADMenu_withNSString_withASIFragment_(parent, menu, json, self->fragment_);
}

void ASToolbarImpl_setOnMenuItemClickListenerWithNSString_withId_(ASToolbarImpl *self, NSString *strValue, id objValue) {
  if ([objValue isKindOfClass:[NSString class]]) {
    self->onMenuItemClickListener_ = new_ASToolbarImpl_OnMenuItemClickListener_initWithASIWidget_withNSString_(self, strValue);
  }
  else {
    self->onMenuItemClickListener_ = (id<ADXToolbar_OnMenuItemClickListener>) cast_check(objValue, ADXToolbar_OnMenuItemClickListener_class_());
  }
}

void ASToolbarImpl_setOverflowIconWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASToolbarImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  self->overflowIcon_ = strValue;
  id<ASIWidget> overFlowButton = [((ASActionMenuViewImpl *) nil_chk(((ASActionMenuViewImpl *) cast_chk(self->actionMenuView_, [ASActionMenuViewImpl class])))) getOverFlowButtonWidget];
  if (overFlowButton != nil && self->overflowIcon_ != nil) {
    [overFlowButton setAttributeWithNSString:@"src" withId:objValue withBoolean:true];
  }
  if ([self isInitialised]) {
    [((id<ASIWidget>) nil_chk(overFlowButton)) requestLayout];
  }
}

void ASToolbarImpl_setGravityWithId_(ASToolbarImpl *self, id objValue) {
  [((ADXToolbar *) nil_chk(self->toolbar_)) setGravityWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASToolbarImpl_setMaxButtonHeightWithId_(ASToolbarImpl *self, id objValue) {
  [((ADXToolbar *) nil_chk(self->toolbar_)) setMaxButtonHeightWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASToolbarImpl_setButtonGravityWithId_(ASToolbarImpl *self, id objValue) {
  self->mButtonGravity_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
}

void ASToolbarImpl_handlePreMeasureWithId_(ASToolbarImpl *self, id payload) {
  int32_t currentScreenWidth = ASPluginInvoker_getScreenWidth();
  if (self->screenWidth_ != -1 && self->screenWidth_ != currentScreenWidth) {
    ASToolbarImpl_createMenu(self);
  }
  self->screenWidth_ = currentScreenWidth;
}

id<ASIWidget> ASToolbarImpl_getAutoCompleteImplWithADAutoCompleteTextView_(ASToolbarImpl *self, ADAutoCompleteTextView *autoComplete) {
  return [((id<ASILifeCycleDecorator>) nil_chk(((id<ASILifeCycleDecorator>) cast_check(autoComplete, ASILifeCycleDecorator_class_())))) getWidget];
}

void ASToolbarImpl_setOnSuggestionListenerWithADMenuItem_withADAutoCompleteTextView_(ASToolbarImpl *self, id<ADMenuItem> menu, ADAutoCompleteTextView *autoComplete) {
}

ADXBadgeDrawable *ASToolbarImpl_getOrCreateBadgeWithInt_(ASToolbarImpl *self, int32_t id_) {
  if (self->badgeDrawables_ == nil) {
    self->badgeDrawables_ = new_JavaUtilHashMap_init();
  }
  if (![self->badgeDrawables_ containsKeyWithId:JavaLangInteger_valueOfWithInt_(id_)]) {
    ADXBadgeDrawable *badgeDrawable = ADXBadgeDrawable_createWithADContext_([((ADXToolbar *) nil_chk(self->toolbar_)) getContext]);
    (void) [((id<JavaUtilMap>) nil_chk(self->badgeDrawables_)) putWithId:JavaLangInteger_valueOfWithInt_(id_) withId:badgeDrawable];
    id<ADMenuItem> menuItem = [((ADXMenuBuilder *) nil_chk([((ADXToolbar *) nil_chk(self->toolbar_)) getMenu])) findItemWithInt:id_];
    ADView *itemView = [((ADXActionMenuView *) nil_chk(((ADXActionMenuView *) cast_chk([((id<ASIWidget>) nil_chk(self->actionMenuView_)) asWidget], [ADXActionMenuView class])))) getItemViewWithADMenuItem:menuItem];
    if ([((ADView *) nil_chk(itemView)) getParent] != nil) {
      [((ADXBadgeDrawable *) nil_chk(badgeDrawable)) setAdditionalHorizontalOffsetWithInt:JreFpToInt(ASPluginInvoker_convertDpToPixelWithNSString_(@"18dp"))];
      [badgeDrawable setAdditionalVerticalOffsetWithInt:JreFpToInt(ASPluginInvoker_convertDpToPixelWithNSString_(@"12dp"))];
      ADXBadgeUtils_attachBadgeDrawableWithADXBadgeDrawable_withADView_withADFrameLayout_(badgeDrawable, itemView, nil);
    }
  }
  return [((id<JavaUtilMap>) nil_chk(self->badgeDrawables_)) getWithId:JavaLangInteger_valueOfWithInt_(id_)];
}

void ASToolbarImpl_reapplyBadgeDrawables(ASToolbarImpl *self) {
  if (self->badgeDrawables_ != nil) {
    id<JavaUtilSet> ids = [self->badgeDrawables_ keySet];
    for (JavaLangInteger *boxed__ in nil_chk(ids)) {
      int32_t id_ = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
      id<ADMenuItem> menuItem = [((ADXMenuBuilder *) nil_chk([((ADXToolbar *) nil_chk(self->toolbar_)) getMenu])) findItemWithInt:id_];
      ADView *itemView = [((ADXActionMenuView *) nil_chk(((ADXActionMenuView *) cast_chk([((id<ASIWidget>) nil_chk(self->actionMenuView_)) asWidget], [ADXActionMenuView class])))) getItemViewWithADMenuItem:menuItem];
      if ([((ADView *) nil_chk(itemView)) getParent] != nil) {
        ADXBadgeUtils_attachBadgeDrawableWithADXBadgeDrawable_withADView_withADFrameLayout_([((id<JavaUtilMap>) nil_chk(self->badgeDrawables_)) getWithId:JavaLangInteger_valueOfWithInt_(id_)], itemView, nil);
      }
    }
  }
}

void ASToolbarImpl_setContentInsetEndWithId_(ASToolbarImpl *self, id objValue) {
  [((ADXToolbar *) nil_chk(self->toolbar_)) setContentInsetsRelativeWithInt:[self->toolbar_ getContentInsetStart] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASToolbarImpl_setContentInsetStartWithId_(ASToolbarImpl *self, id objValue) {
  [((ADXToolbar *) nil_chk(self->toolbar_)) setContentInsetsRelativeWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue] withInt:[self->toolbar_ getContentInsetEnd]];
}

void ASToolbarImpl_setTitleMarginWithId_(ASToolbarImpl *self, id objValue) {
  [((ADXToolbar *) nil_chk(self->toolbar_)) setTitleMarginWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASToolbarImpl_setOnQueryTextListenerWithNSString_withNSString_withId_(ASToolbarImpl *self, NSString *action, NSString *strValue, id objValue) {
  id<ADXSearchView_OnQueryTextListener> onQueryTextListener;
  if ([objValue isKindOfClass:[NSString class]]) {
    onQueryTextListener = new_ASToolbarImpl_OnQueryTextListener_initWithASIWidget_withNSString_withNSString_(self, strValue, action);
    if ([((NSString *) nil_chk(action)) isEqual:@"onQueryTextSubmit"]) {
      self->onQueryTextSubmit_ = onQueryTextListener;
    }
    if ([action isEqual:@"onQueryTextChange"]) {
      self->onQueryTextChange_ = onQueryTextListener;
    }
  }
  else {
    self->onQueryTextChange_ = nil;
    self->onQueryTextSubmit_ = nil;
    onQueryTextListener = (id<ADXSearchView_OnQueryTextListener>) cast_check(objValue, ADXSearchView_OnQueryTextListener_class_());
  }
  int32_t menuSize = [((ADXMenuBuilder *) nil_chk([((ADXToolbar *) nil_chk(self->toolbar_)) getMenu])) size];
  for (int32_t i = 0; i < menuSize; i++) {
    id<ADMenuItem> menu = [((ADXMenuBuilder *) nil_chk([((ADXToolbar *) nil_chk(self->toolbar_)) getMenu])) getItemWithInt:i];
    if ([[((id<ADMenuItem>) nil_chk(menu)) getActionView] isKindOfClass:[ADXSearchView class]]) {
      if (self->onQueryTextSubmit_ == nil && self->onQueryTextChange_ == nil) {
        [((ADXSearchView *) nil_chk(((ADXSearchView *) cast_chk([menu getActionView], [ADXSearchView class])))) setOnQueryTextListenerWithADXSearchView_OnQueryTextListener:onQueryTextListener];
      }
      else {
        [((ADXSearchView *) nil_chk(((ADXSearchView *) cast_chk([menu getActionView], [ADXSearchView class])))) setOnQueryTextListenerWithADXSearchView_OnQueryTextListener:new_ASToolbarImpl_2_initWithASToolbarImpl_(self)];
      }
    }
  }
}

void ASToolbarImpl_setActionLayoutEventIdsWithId_(ASToolbarImpl *self, id objValue) {
  self->actionLayoutEventIds_ = (id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_());
}

void ASToolbarImpl_applySearchViewAttributesWithADMenuItem_(ASToolbarImpl *self, id<ADMenuItem> menu) {
  ADAutoCompleteTextView *autoComplete = ASToolbarImpl_findAutoCompleteWithADViewGroup_(self, (ADViewGroup *) cast_chk([((id<ADMenuItem>) nil_chk(menu)) getActionView], [ADViewGroup class]));
  id<ASIWidget> widget = ASToolbarImpl_getAutoCompleteImplWithADAutoCompleteTextView_(self, autoComplete);
  id<JavaUtilSet> set = [((id<JavaUtilMap>) nil_chk(self->searchviewAttributes_)) keySet];
  for (NSString * __strong key in nil_chk(set)) {
    [((id<ASIWidget>) nil_chk(widget)) setAttributeWithNSString:key withId:[((id<JavaUtilMap>) nil_chk(self->searchviewAttributes_)) getWithId:key] withBoolean:false];
  }
  [((id<ASIWidget>) nil_chk(widget)) applyModelToWidget];
  ASToolbarImpl_setOnSuggestionListenerWithADMenuItem_withADAutoCompleteTextView_(self, menu, autoComplete);
}

ADAutoCompleteTextView *ASToolbarImpl_findAutoCompleteWithADViewGroup_(ASToolbarImpl *self, ADViewGroup *actionView) {
  for (int32_t i = 0; i < [((ADViewGroup *) nil_chk(actionView)) getChildCount]; i++) {
    ADView *view = [actionView getChildAtWithInt:i];
    if ([view isKindOfClass:[ADAutoCompleteTextView class]]) {
      return (ADAutoCompleteTextView *) view;
    }
    if ([view isKindOfClass:[ADViewGroup class]]) {
      return ASToolbarImpl_findAutoCompleteWithADViewGroup_(self, (ADViewGroup *) view);
    }
  }
  return nil;
}

void ASToolbarImpl_setSearchviewAttributesWithId_(ASToolbarImpl *self, id objValue) {
  self->searchviewAttributes_ = ASModelExpressionParser_parseSimpleCssExpressionWithNSString_((NSString *) cast_chk(objValue, [NSString class]));
}

void ASToolbarImpl_setBadgeBackgroundColorsWithId_(ASToolbarImpl *self, id objValue) {
  ASToolbarImpl_setValueOnBadgeDrawableWithId_withASToolbarImpl_ValueSetter_(self, objValue, JreLoadStatic(ASToolbarImpl_$Lambda$2, instance));
}

void ASToolbarImpl_setValueOnBadgeDrawableWithId_withASToolbarImpl_ValueSetter_(ASToolbarImpl *self, id objValue, id<ASToolbarImpl_ValueSetter> valueSetter) {
  if (self->badgeMenuItemIds_ != nil) {
    id<JavaUtilList> badgeAttrs = ASPluginInvoker_getListWithId_(objValue);
    for (int32_t i = 0; i < [((id<JavaUtilList>) nil_chk(self->badgeMenuItemIds_)) size]; i++) {
      int32_t id_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<JavaUtilList>) nil_chk(self->badgeMenuItemIds_)) getWithInt:i], [JavaLangInteger class]))) intValue];
      ADXBadgeDrawable *badge = ASToolbarImpl_getOrCreateBadgeWithInt_(self, id_);
      id value = [((id<JavaUtilList>) nil_chk(badgeAttrs)) getWithInt:i];
      [((id<ASToolbarImpl_ValueSetter>) nil_chk(valueSetter)) setValueOnBadgeDrawableWithADXBadgeDrawable:badge withId:value];
    }
  }
}

void ASToolbarImpl_setBadgeMenuItemIdsWithId_(ASToolbarImpl *self, id objValue) {
  self->badgeMenuItemIds_ = ASPluginInvoker_getListWithId_(objValue);
}

void ASToolbarImpl_setBadgeNumbersWithId_(ASToolbarImpl *self, id objValue) {
  ASToolbarImpl_setValueOnBadgeDrawableWithId_withASToolbarImpl_ValueSetter_(self, objValue, JreLoadStatic(ASToolbarImpl_$Lambda$3, instance));
}

void ASToolbarImpl_setBadgeVerticalOffsetsWithId_(ASToolbarImpl *self, id objValue) {
  ASToolbarImpl_setValueOnBadgeDrawableWithId_withASToolbarImpl_ValueSetter_(self, objValue, JreLoadStatic(ASToolbarImpl_$Lambda$4, instance));
}

void ASToolbarImpl_setBadgeHorizontalOffsetsWithId_(ASToolbarImpl *self, id objValue) {
  ASToolbarImpl_setValueOnBadgeDrawableWithId_withASToolbarImpl_ValueSetter_(self, objValue, JreLoadStatic(ASToolbarImpl_$Lambda$5, instance));
}

void ASToolbarImpl_setBadgeGravitiesWithId_(ASToolbarImpl *self, id objValue) {
  ASToolbarImpl_setValueOnBadgeDrawableWithId_withASToolbarImpl_ValueSetter_(self, objValue, JreLoadStatic(ASToolbarImpl_$Lambda$6, instance));
}

void ASToolbarImpl_setBadgeMaxCharacterCountsWithId_(ASToolbarImpl *self, id objValue) {
  ASToolbarImpl_setValueOnBadgeDrawableWithId_withASToolbarImpl_ValueSetter_(self, objValue, JreLoadStatic(ASToolbarImpl_$Lambda$7, instance));
}

void ASToolbarImpl_setBadgeAlphasWithId_(ASToolbarImpl *self, id objValue) {
  ASToolbarImpl_setValueOnBadgeDrawableWithId_withASToolbarImpl_ValueSetter_(self, objValue, JreLoadStatic(ASToolbarImpl_$Lambda$8, instance));
}

void ASToolbarImpl_setBadgeTextColorsWithId_(ASToolbarImpl *self, id objValue) {
  ASToolbarImpl_setValueOnBadgeDrawableWithId_withASToolbarImpl_ValueSetter_(self, objValue, JreLoadStatic(ASToolbarImpl_$Lambda$9, instance));
}

void ASToolbarImpl_setBadgeIsVisiblesWithId_(ASToolbarImpl *self, id objValue) {
  ASToolbarImpl_setValueOnBadgeDrawableWithId_withASToolbarImpl_ValueSetter_(self, objValue, JreLoadStatic(ASToolbarImpl_$Lambda$10, instance));
}

void ASToolbarImpl_setTextAppearanceResourcesWithId_(ASToolbarImpl *self, id objValue) {
  ASToolbarImpl_setValueOnBadgeDrawableWithId_withASToolbarImpl_ValueSetter_(self, objValue, JreLoadStatic(ASToolbarImpl_$Lambda$11, instance));
}

void ASToolbarImpl_setNavigationOnClickListenerWithASToolbarImpl_OnClickListener_(ASToolbarImpl *self, ASToolbarImpl_OnClickListener *onClickListener) {
  if (self->navigationIcon_ != nil) {
    ASViewImpl_setOnClickWithASIWidget_withNSString_withId_withADView_OnClickListener_(self->navigationIcon_, @"onclick", [self->navigationIcon_ asNativeWidget], onClickListener);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASToolbarImpl)

J2OBJC_NAME_MAPPING(ASToolbarImpl, "com.ashera.toolbar", "AS")

@implementation ASToolbarImpl_PreMeasureHandler

- (instancetype)initWithASToolbarImpl:(ASToolbarImpl *)outer$
                         withNSString:(NSString *)type {
  ASToolbarImpl_PreMeasureHandler_initWithASToolbarImpl_withNSString_(self, outer$, type);
  return self;
}

- (void)doPerformWithId:(id)payload {
  ASToolbarImpl_handlePreMeasureWithId_(this$0_, payload);
}

- (void)__javaClone:(ASToolbarImpl_PreMeasureHandler *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASToolbarImpl:withNSString:);
  methods[1].selector = @selector(doPerformWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASToolbarImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASToolbarImpl;LNSString;", "doPerform", "LNSObject;", "LASToolbarImpl;" };
  static const J2ObjcClassInfo _ASToolbarImpl_PreMeasureHandler = { "PreMeasureHandler", "com.ashera.toolbar", ptrTable, methods, fields, 7, 0x0, 2, 1, 3, -1, -1, -1, -1 };
  return &_ASToolbarImpl_PreMeasureHandler;
}

@end

void ASToolbarImpl_PreMeasureHandler_initWithASToolbarImpl_withNSString_(ASToolbarImpl_PreMeasureHandler *self, ASToolbarImpl *outer$, NSString *type) {
  self->this$0_ = outer$;
  ASEventBusHandler_initWithNSString_(self, type);
}

ASToolbarImpl_PreMeasureHandler *new_ASToolbarImpl_PreMeasureHandler_initWithASToolbarImpl_withNSString_(ASToolbarImpl *outer$, NSString *type) {
  J2OBJC_NEW_IMPL(ASToolbarImpl_PreMeasureHandler, initWithASToolbarImpl_withNSString_, outer$, type)
}

ASToolbarImpl_PreMeasureHandler *create_ASToolbarImpl_PreMeasureHandler_initWithASToolbarImpl_withNSString_(ASToolbarImpl *outer$, NSString *type) {
  J2OBJC_CREATE_IMPL(ASToolbarImpl_PreMeasureHandler, initWithASToolbarImpl_withNSString_, outer$, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASToolbarImpl_PreMeasureHandler)

@implementation ASToolbarImpl_ToolbarExt

- (id<ASIWidget>)getWidget {
  return this$0_;
}

- (void)setMaxWidthWithInt:(int32_t)width {
  mMaxWidth_ = width;
}

- (void)setMaxHeightWithInt:(int32_t)height {
  mMaxHeight_ = height;
}

- (int32_t)getMaxWidth {
  return mMaxWidth_;
}

- (int32_t)getMaxHeight {
  return mMaxHeight_;
}

- (instancetype)initWithASToolbarImpl:(ASToolbarImpl *)outer$ {
  ASToolbarImpl_ToolbarExt_initWithASToolbarImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(int32_t)widthMeasureSpec
                 withInt:(int32_t)heightMeasureSpec {
  if (mMaxWidth_ > 0) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxWidth_, ADView_MeasureSpec_AT_MOST);
  }
  if (mMaxHeight_ > 0) {
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxHeight_, ADView_MeasureSpec_AT_MOST);
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(bool)changed
                    withInt:(int32_t)l
                    withInt:(int32_t)t
                    withInt:(int32_t)r
                    withInt:(int32_t)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  if (![self isOverlay]) {
    ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  }
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  overlays_ = ASViewImpl_drawOverlayWithASIWidget_withJavaUtilList_(this$0_, overlays_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(int32_t)width
                               withInt:(int32_t)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  if (![this$0_ isWidgetDisposed]) {
    ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
  }
}

- (ADView *)inflateViewWithNSString:(NSString *)layout {
  if (templates_ == nil) {
    templates_ = new_JavaUtilHashMap_init();
  }
  id<ASIWidget> template_ = [templates_ getWithId:layout];
  if (template_ == nil) {
    template_ = (id<ASIWidget>) cast_check([this$0_ quickConvertWithId:layout withNSString:@"template"], ASIWidget_class_());
    (void) [((id<JavaUtilMap>) nil_chk(templates_)) putWithId:layout withId:template_];
  }
  id<ASIWidget> widget = [((id<ASIWidget>) nil_chk(template_)) loadLazyWidgetsWithASHasWidgets:this$0_];
  return (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
}

- (void)remeasure {
  if ([this$0_ getFragment] != nil) {
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
}

- (void)removeFromParent {
  [((id<ASHasWidgets>) nil_chk([this$0_ getParent])) removeWithASIWidget:this$0_];
}

- (void)getLocationOnScreenWithIntArray:(IOSIntArray *)appScreenLocation {
  *IOSIntArray_GetRef(nil_chk(appScreenLocation), 0) = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  *IOSIntArray_GetRef(appScreenLocation, 1) = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
}

- (void)getWindowVisibleDisplayFrameWithADRect:(ADRect *)displayFrame {
  ((ADRect *) nil_chk(displayFrame))->left_ = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->top_ = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->right_ = displayFrame->left_ + [self getWidth];
  displayFrame->bottom_ = displayFrame->top_ + [self getHeight];
}

- (void)offsetTopAndBottomWithInt:(int32_t)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(int32_t)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setMyAttributeWithNSString:(NSString *)name
                            withId:(id)value {
  if ([((NSString *) nil_chk(name)) isEqual:@"state0"]) {
    [self setState0WithId:value];
    return;
  }
  if ([name isEqual:@"state1"]) {
    [self setState1WithId:value];
    return;
  }
  if ([name isEqual:@"state2"]) {
    [self setState2WithId:value];
    return;
  }
  if ([name isEqual:@"state3"]) {
    [self setState3WithId:value];
    return;
  }
  if ([name isEqual:@"state4"]) {
    [self setState4WithId:value];
    return;
  }
  [this$0_ setAttributeWithNSString:name withId:value withBoolean:!([value isKindOfClass:[NSString class]])];
}

- (void)setVisibilityWithInt:(int32_t)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)setState0WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 0, value);
}

- (void)setState1WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 1, value);
}

- (void)setState2WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 2, value);
}

- (void)setState3WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 3, value);
}

- (void)setState4WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 4, value);
}

- (void)state0 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 0);
}

- (void)state1 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 1);
}

- (void)state2 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 2);
}

- (void)state3 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 3);
}

- (void)state4 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 4);
}

- (void)stateYes {
  ASViewImpl_stateYesWithASIWidget_(this$0_);
}

- (void)stateNo {
  ASViewImpl_stateNoWithASIWidget_(this$0_);
}

- (void)endViewTransitionWithADView:(ADView *)view {
  [super endViewTransitionWithADView:view];
  [this$0_ runBufferedRunnables];
}

- (void)__javaClone:(ASToolbarImpl_ToolbarExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 36, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getWidget);
  methods[1].selector = @selector(setMaxWidthWithInt:);
  methods[2].selector = @selector(setMaxHeightWithInt:);
  methods[3].selector = @selector(getMaxWidth);
  methods[4].selector = @selector(getMaxHeight);
  methods[5].selector = @selector(initWithASToolbarImpl:);
  methods[6].selector = @selector(onMeasureWithInt:withInt:);
  methods[7].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[8].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[9].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[10].selector = @selector(newInstanceWithASIWidget:);
  methods[11].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[12].selector = @selector(getMethods);
  methods[13].selector = @selector(initialized);
  methods[14].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[15].selector = @selector(drawableStateChanged);
  methods[16].selector = @selector(inflateViewWithNSString:);
  methods[17].selector = @selector(remeasure);
  methods[18].selector = @selector(removeFromParent);
  methods[19].selector = @selector(getLocationOnScreenWithIntArray:);
  methods[20].selector = @selector(getWindowVisibleDisplayFrameWithADRect:);
  methods[21].selector = @selector(offsetTopAndBottomWithInt:);
  methods[22].selector = @selector(offsetLeftAndRightWithInt:);
  methods[23].selector = @selector(setMyAttributeWithNSString:withId:);
  methods[24].selector = @selector(setVisibilityWithInt:);
  methods[25].selector = @selector(setState0WithId:);
  methods[26].selector = @selector(setState1WithId:);
  methods[27].selector = @selector(setState2WithId:);
  methods[28].selector = @selector(setState3WithId:);
  methods[29].selector = @selector(setState4WithId:);
  methods[30].selector = @selector(state0);
  methods[31].selector = @selector(state1);
  methods[32].selector = @selector(state2);
  methods[33].selector = @selector(state3);
  methods[34].selector = @selector(state4);
  methods[35].selector = @selector(stateYes);
  methods[36].selector = @selector(stateNo);
  methods[37].selector = @selector(endViewTransitionWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASToolbarImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "overlays_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 37, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "templates_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 38, -1 },
  };
  static const void *ptrTable[] = { "setMaxWidth", "I", "setMaxHeight", "LASToolbarImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "inflateView", "LNSString;", "getLocationOnScreen", "[I", "getWindowVisibleDisplayFrame", "LADRect;", "offsetTopAndBottom", "offsetLeftAndRight", "setMyAttribute", "LNSString;LNSObject;", "setVisibility", "setState0", "LNSObject;", "setState1", "setState2", "setState3", "setState4", "endViewTransition", "LADView;", "Ljava/util/List<Lcom/ashera/widget/IWidget;>;", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/widget/IWidget;>;" };
  static const J2ObjcClassInfo _ASToolbarImpl_ToolbarExt = { "ToolbarExt", "com.ashera.toolbar", ptrTable, methods, fields, 7, 0x1, 38, 7, 3, -1, -1, -1, -1 };
  return &_ASToolbarImpl_ToolbarExt;
}

@end

void ASToolbarImpl_ToolbarExt_initWithASToolbarImpl_(ASToolbarImpl_ToolbarExt *self, ASToolbarImpl *outer$) {
  self->this$0_ = outer$;
  ADXToolbar_init(self);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
  self->mMaxWidth_ = -1;
  self->mMaxHeight_ = -1;
}

ASToolbarImpl_ToolbarExt *new_ASToolbarImpl_ToolbarExt_initWithASToolbarImpl_(ASToolbarImpl *outer$) {
  J2OBJC_NEW_IMPL(ASToolbarImpl_ToolbarExt, initWithASToolbarImpl_, outer$)
}

ASToolbarImpl_ToolbarExt *create_ASToolbarImpl_ToolbarExt_initWithASToolbarImpl_(ASToolbarImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASToolbarImpl_ToolbarExt, initWithASToolbarImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASToolbarImpl_ToolbarExt)

@implementation ASToolbarImpl_1

- (instancetype)initWithASToolbarImpl:(ASToolbarImpl *)outer$
                       withADMenuItem:(id<ADMenuItem>)capture$0
                         withNSString:(NSString *)capture$1 {
  ASToolbarImpl_1_initWithASToolbarImpl_withADMenuItem_withNSString_(self, outer$, capture$0, capture$1);
  return self;
}

- (void)onClickWithADView:(ADView *)v {
  if (this$0_->onMenuItemClickListener_ != nil) {
    [((ADView *) nil_chk([((id<ADMenuItem>) nil_chk(val$menu_)) getActionView])) setTagWithId:val$myactionLayoutEventId_];
    [((id<ADXToolbar_OnMenuItemClickListener>) nil_chk(this$0_->onMenuItemClickListener_)) onMenuItemClickWithADMenuItem:val$menu_];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASToolbarImpl:withADMenuItem:withNSString:);
  methods[1].selector = @selector(onClickWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASToolbarImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$menu_", "LADMenuItem;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$myactionLayoutEventId_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASToolbarImpl;LADMenuItem;LNSString;", "onClick", "LADView;", "LASToolbarImpl;", "initialized" };
  static const J2ObjcClassInfo _ASToolbarImpl_1 = { "", "com.ashera.toolbar", ptrTable, methods, fields, 7, 0x8000, 2, 3, 3, -1, 4, -1, -1 };
  return &_ASToolbarImpl_1;
}

@end

void ASToolbarImpl_1_initWithASToolbarImpl_withADMenuItem_withNSString_(ASToolbarImpl_1 *self, ASToolbarImpl *outer$, id<ADMenuItem> capture$0, NSString *capture$1) {
  self->this$0_ = outer$;
  self->val$menu_ = capture$0;
  self->val$myactionLayoutEventId_ = capture$1;
  NSObject_init(self);
}

ASToolbarImpl_1 *new_ASToolbarImpl_1_initWithASToolbarImpl_withADMenuItem_withNSString_(ASToolbarImpl *outer$, id<ADMenuItem> capture$0, NSString *capture$1) {
  J2OBJC_NEW_IMPL(ASToolbarImpl_1, initWithASToolbarImpl_withADMenuItem_withNSString_, outer$, capture$0, capture$1)
}

ASToolbarImpl_1 *create_ASToolbarImpl_1_initWithASToolbarImpl_withADMenuItem_withNSString_(ASToolbarImpl *outer$, id<ADMenuItem> capture$0, NSString *capture$1) {
  J2OBJC_CREATE_IMPL(ASToolbarImpl_1, initWithASToolbarImpl_withADMenuItem_withNSString_, outer$, capture$0, capture$1)
}

@implementation ASToolbarImpl_2

- (instancetype)initWithASToolbarImpl:(ASToolbarImpl *)outer$ {
  ASToolbarImpl_2_initWithASToolbarImpl_(self, outer$);
  return self;
}

- (bool)onQueryTextChangeWithNSString:(NSString *)text {
  if (this$0_->onQueryTextChange_ != nil) {
    [this$0_->onQueryTextChange_ onQueryTextChangeWithNSString:text];
  }
  return false;
}

- (bool)onQueryTextSubmitWithNSString:(NSString *)query {
  if (this$0_->onQueryTextSubmit_ != nil) {
    [this$0_->onQueryTextSubmit_ onQueryTextSubmitWithNSString:query];
  }
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASToolbarImpl:);
  methods[1].selector = @selector(onQueryTextChangeWithNSString:);
  methods[2].selector = @selector(onQueryTextSubmitWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASToolbarImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASToolbarImpl;", "onQueryTextChange", "LNSString;", "onQueryTextSubmit", "setOnQueryTextListenerWithNSString:withNSString:withId:" };
  static const J2ObjcClassInfo _ASToolbarImpl_2 = { "", "com.ashera.toolbar", ptrTable, methods, fields, 7, 0x8000, 3, 1, 0, -1, 4, -1, -1 };
  return &_ASToolbarImpl_2;
}

@end

void ASToolbarImpl_2_initWithASToolbarImpl_(ASToolbarImpl_2 *self, ASToolbarImpl *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ASToolbarImpl_2 *new_ASToolbarImpl_2_initWithASToolbarImpl_(ASToolbarImpl *outer$) {
  J2OBJC_NEW_IMPL(ASToolbarImpl_2, initWithASToolbarImpl_, outer$)
}

ASToolbarImpl_2 *create_ASToolbarImpl_2_initWithASToolbarImpl_(ASToolbarImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASToolbarImpl_2, initWithASToolbarImpl_, outer$)
}

@implementation ASToolbarImpl_ValueSetter

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setValueOnBadgeDrawableWithADXBadgeDrawable:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "setValueOnBadgeDrawable", "LADXBadgeDrawable;LNSObject;", "LASToolbarImpl;" };
  static const J2ObjcClassInfo _ASToolbarImpl_ValueSetter = { "ValueSetter", "com.ashera.toolbar", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_ASToolbarImpl_ValueSetter;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ASToolbarImpl_ValueSetter)

@implementation ASToolbarImpl_OnQueryTextListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASToolbarImpl_OnQueryTextListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASToolbarImpl_OnQueryTextListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (bool)onQueryTextSubmitWithNSString:(NSString *)query {
  bool result = true;
  if (action_ == nil || [action_ isEqual:@"onQueryTextSubmit"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onQueryTextSubmit"];
    id<JavaUtilMap> obj = [self getOnQueryTextSubmitEventObjWithNSString:query];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        id commandResult = [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ query } count:1 type:NSObject_class_()]];
        if (commandResult != nil) {
          result = [(JavaLangBoolean *) cast_chk(commandResult, [JavaLangBoolean class]) booleanValue];
        }
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return result;
}

- (id<JavaUtilMap>)getOnQueryTextSubmitEventObjWithNSString:(NSString *)query {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"querytextsubmit"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  (void) [obj putWithId:@"namespace" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getNamespace]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"query", query);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onQueryTextSubmit" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

- (bool)onQueryTextChangeWithNSString:(NSString *)newText {
  bool result = true;
  if (action_ == nil || [action_ isEqual:@"onQueryTextChange"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onQueryTextChange"];
    id<JavaUtilMap> obj = [self getOnQueryTextChangeEventObjWithNSString:newText];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        id commandResult = [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ newText } count:1 type:NSObject_class_()]];
        if (commandResult != nil) {
          result = [(JavaLangBoolean *) cast_chk(commandResult, [JavaLangBoolean class]) booleanValue];
        }
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return result;
}

- (id<JavaUtilMap>)getOnQueryTextChangeEventObjWithNSString:(NSString *)newText {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"querytextchange"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  (void) [obj putWithId:@"namespace" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getNamespace]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"newText", newText);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onQueryTextChange" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
    { NULL, "Z", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 7, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onQueryTextSubmitWithNSString:);
  methods[4].selector = @selector(getOnQueryTextSubmitEventObjWithNSString:);
  methods[5].selector = @selector(onQueryTextChangeWithNSString:);
  methods[6].selector = @selector(getOnQueryTextChangeEventObjWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onQueryTextSubmit", "LNSString;", "getOnQueryTextSubmitEventObj", "(Ljava/lang/String;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "onQueryTextChange", "getOnQueryTextChangeEventObj", "LASToolbarImpl;" };
  static const J2ObjcClassInfo _ASToolbarImpl_OnQueryTextListener = { "OnQueryTextListener", "com.ashera.toolbar", ptrTable, methods, fields, 7, 0xa, 7, 4, 8, -1, -1, -1, -1 };
  return &_ASToolbarImpl_OnQueryTextListener;
}

@end

void ASToolbarImpl_OnQueryTextListener_initWithASIWidget_withNSString_(ASToolbarImpl_OnQueryTextListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASToolbarImpl_OnQueryTextListener *new_ASToolbarImpl_OnQueryTextListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASToolbarImpl_OnQueryTextListener, initWithASIWidget_withNSString_, w, strValue)
}

ASToolbarImpl_OnQueryTextListener *create_ASToolbarImpl_OnQueryTextListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASToolbarImpl_OnQueryTextListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASToolbarImpl_OnQueryTextListener_initWithASIWidget_withNSString_withNSString_(ASToolbarImpl_OnQueryTextListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASToolbarImpl_OnQueryTextListener *new_ASToolbarImpl_OnQueryTextListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASToolbarImpl_OnQueryTextListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASToolbarImpl_OnQueryTextListener *create_ASToolbarImpl_OnQueryTextListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASToolbarImpl_OnQueryTextListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASToolbarImpl_OnQueryTextListener)

@implementation ASToolbarImpl_OnClickListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASToolbarImpl_OnClickListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASToolbarImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onClickWithADView:(ADView *)v {
  if (action_ == nil || [action_ isEqual:@"onClick"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onClick"];
    id<JavaUtilMap> obj = [self getOnClickEventObjWithADView:v];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ v } count:1 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnClickEventObjWithADView:(ADView *)v {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"click"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  (void) [obj putWithId:@"namespace" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getNamespace]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onClick" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onClickWithADView:);
  methods[4].selector = @selector(getOnClickEventObjWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onClick", "LADView;", "getOnClickEventObj", "(Lr/android/view/View;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASToolbarImpl;" };
  static const J2ObjcClassInfo _ASToolbarImpl_OnClickListener = { "OnClickListener", "com.ashera.toolbar", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASToolbarImpl_OnClickListener;
}

@end

void ASToolbarImpl_OnClickListener_initWithASIWidget_withNSString_(ASToolbarImpl_OnClickListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASToolbarImpl_OnClickListener *new_ASToolbarImpl_OnClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASToolbarImpl_OnClickListener, initWithASIWidget_withNSString_, w, strValue)
}

ASToolbarImpl_OnClickListener *create_ASToolbarImpl_OnClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASToolbarImpl_OnClickListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASToolbarImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(ASToolbarImpl_OnClickListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASToolbarImpl_OnClickListener *new_ASToolbarImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASToolbarImpl_OnClickListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASToolbarImpl_OnClickListener *create_ASToolbarImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASToolbarImpl_OnClickListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASToolbarImpl_OnClickListener)

@implementation ASToolbarImpl_OnMenuItemClickListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASToolbarImpl_OnMenuItemClickListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASToolbarImpl_OnMenuItemClickListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (bool)onMenuItemClickWithADMenuItem:(id<ADMenuItem>)item {
  bool result = true;
  if (action_ == nil || [action_ isEqual:@"onMenuItemClick"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onMenuItemClick"];
    id<JavaUtilMap> obj = [self getOnMenuItemClickEventObjWithADMenuItem:item];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        id commandResult = [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ item } count:1 type:NSObject_class_()]];
        if (commandResult != nil) {
          result = [(JavaLangBoolean *) cast_chk(commandResult, [JavaLangBoolean class]) booleanValue];
        }
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return result;
}

- (id<JavaUtilMap>)getOnMenuItemClickEventObjWithADMenuItem:(id<ADMenuItem>)item {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"menuitemclick"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  (void) [obj putWithId:@"namespace" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getNamespace]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASViewImpl_addEventInfoWithJavaUtilMap_withADMenuItem_(obj, item);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onMenuItemClick" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onMenuItemClickWithADMenuItem:);
  methods[4].selector = @selector(getOnMenuItemClickEventObjWithADMenuItem:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onMenuItemClick", "LADMenuItem;", "getOnMenuItemClickEventObj", "(Lr/android/view/MenuItem;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASToolbarImpl;" };
  static const J2ObjcClassInfo _ASToolbarImpl_OnMenuItemClickListener = { "OnMenuItemClickListener", "com.ashera.toolbar", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASToolbarImpl_OnMenuItemClickListener;
}

@end

void ASToolbarImpl_OnMenuItemClickListener_initWithASIWidget_withNSString_(ASToolbarImpl_OnMenuItemClickListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASToolbarImpl_OnMenuItemClickListener *new_ASToolbarImpl_OnMenuItemClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASToolbarImpl_OnMenuItemClickListener, initWithASIWidget_withNSString_, w, strValue)
}

ASToolbarImpl_OnMenuItemClickListener *create_ASToolbarImpl_OnMenuItemClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASToolbarImpl_OnMenuItemClickListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASToolbarImpl_OnMenuItemClickListener_initWithASIWidget_withNSString_withNSString_(ASToolbarImpl_OnMenuItemClickListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASToolbarImpl_OnMenuItemClickListener *new_ASToolbarImpl_OnMenuItemClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASToolbarImpl_OnMenuItemClickListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASToolbarImpl_OnMenuItemClickListener *create_ASToolbarImpl_OnMenuItemClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASToolbarImpl_OnMenuItemClickListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASToolbarImpl_OnMenuItemClickListener)

@implementation ASToolbarImpl_$Lambda$1

- (void)run {
  ASViewGroupImpl_nativeRemoveViewWithASIWidget_(val$widget_);
}

@end

void ASToolbarImpl_$Lambda$1_initWithASIWidget_(ASToolbarImpl_$Lambda$1 *self, id<ASIWidget> capture$0) {
  self->val$widget_ = capture$0;
  NSObject_init(self);
}

ASToolbarImpl_$Lambda$1 *new_ASToolbarImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_NEW_IMPL(ASToolbarImpl_$Lambda$1, initWithASIWidget_, capture$0)
}

ASToolbarImpl_$Lambda$1 *create_ASToolbarImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_CREATE_IMPL(ASToolbarImpl_$Lambda$1, initWithASIWidget_, capture$0)
}

J2OBJC_INITIALIZED_DEFN(ASToolbarImpl_$Lambda$2)

@implementation ASToolbarImpl_$Lambda$2

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value {
  [((ADXBadgeDrawable *) nil_chk(badge)) setBackgroundColorWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(value, [JavaLangInteger class]))) intValue]];
}

+ (void)initialize {
  if (self == [ASToolbarImpl_$Lambda$2 class]) {
    ASToolbarImpl_$Lambda$2_instance = new_ASToolbarImpl_$Lambda$2_init();
    J2OBJC_SET_INITIALIZED(ASToolbarImpl_$Lambda$2)
  }
}

@end

void ASToolbarImpl_$Lambda$2_init(ASToolbarImpl_$Lambda$2 *self) {
  NSObject_init(self);
}

ASToolbarImpl_$Lambda$2 *new_ASToolbarImpl_$Lambda$2_init() {
  J2OBJC_NEW_IMPL(ASToolbarImpl_$Lambda$2, init)
}

ASToolbarImpl_$Lambda$2 *create_ASToolbarImpl_$Lambda$2_init() {
  J2OBJC_CREATE_IMPL(ASToolbarImpl_$Lambda$2, init)
}

J2OBJC_INITIALIZED_DEFN(ASToolbarImpl_$Lambda$3)

@implementation ASToolbarImpl_$Lambda$3

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value {
  [((ADXBadgeDrawable *) nil_chk(badge)) setNumberWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(value, [JavaLangInteger class]))) intValue]];
}

+ (void)initialize {
  if (self == [ASToolbarImpl_$Lambda$3 class]) {
    ASToolbarImpl_$Lambda$3_instance = new_ASToolbarImpl_$Lambda$3_init();
    J2OBJC_SET_INITIALIZED(ASToolbarImpl_$Lambda$3)
  }
}

@end

void ASToolbarImpl_$Lambda$3_init(ASToolbarImpl_$Lambda$3 *self) {
  NSObject_init(self);
}

ASToolbarImpl_$Lambda$3 *new_ASToolbarImpl_$Lambda$3_init() {
  J2OBJC_NEW_IMPL(ASToolbarImpl_$Lambda$3, init)
}

ASToolbarImpl_$Lambda$3 *create_ASToolbarImpl_$Lambda$3_init() {
  J2OBJC_CREATE_IMPL(ASToolbarImpl_$Lambda$3, init)
}

J2OBJC_INITIALIZED_DEFN(ASToolbarImpl_$Lambda$4)

@implementation ASToolbarImpl_$Lambda$4

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value {
  [((ADXBadgeDrawable *) nil_chk(badge)) setVerticalOffsetWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(value, [JavaLangInteger class]))) intValue]];
}

+ (void)initialize {
  if (self == [ASToolbarImpl_$Lambda$4 class]) {
    ASToolbarImpl_$Lambda$4_instance = new_ASToolbarImpl_$Lambda$4_init();
    J2OBJC_SET_INITIALIZED(ASToolbarImpl_$Lambda$4)
  }
}

@end

void ASToolbarImpl_$Lambda$4_init(ASToolbarImpl_$Lambda$4 *self) {
  NSObject_init(self);
}

ASToolbarImpl_$Lambda$4 *new_ASToolbarImpl_$Lambda$4_init() {
  J2OBJC_NEW_IMPL(ASToolbarImpl_$Lambda$4, init)
}

ASToolbarImpl_$Lambda$4 *create_ASToolbarImpl_$Lambda$4_init() {
  J2OBJC_CREATE_IMPL(ASToolbarImpl_$Lambda$4, init)
}

J2OBJC_INITIALIZED_DEFN(ASToolbarImpl_$Lambda$5)

@implementation ASToolbarImpl_$Lambda$5

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value {
  [((ADXBadgeDrawable *) nil_chk(badge)) setHorizontalOffsetWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(value, [JavaLangInteger class]))) intValue]];
}

+ (void)initialize {
  if (self == [ASToolbarImpl_$Lambda$5 class]) {
    ASToolbarImpl_$Lambda$5_instance = new_ASToolbarImpl_$Lambda$5_init();
    J2OBJC_SET_INITIALIZED(ASToolbarImpl_$Lambda$5)
  }
}

@end

void ASToolbarImpl_$Lambda$5_init(ASToolbarImpl_$Lambda$5 *self) {
  NSObject_init(self);
}

ASToolbarImpl_$Lambda$5 *new_ASToolbarImpl_$Lambda$5_init() {
  J2OBJC_NEW_IMPL(ASToolbarImpl_$Lambda$5, init)
}

ASToolbarImpl_$Lambda$5 *create_ASToolbarImpl_$Lambda$5_init() {
  J2OBJC_CREATE_IMPL(ASToolbarImpl_$Lambda$5, init)
}

J2OBJC_INITIALIZED_DEFN(ASToolbarImpl_$Lambda$6)

@implementation ASToolbarImpl_$Lambda$6

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value {
  [((ADXBadgeDrawable *) nil_chk(badge)) setBadgeGravityWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(value, [JavaLangInteger class]))) intValue]];
}

+ (void)initialize {
  if (self == [ASToolbarImpl_$Lambda$6 class]) {
    ASToolbarImpl_$Lambda$6_instance = new_ASToolbarImpl_$Lambda$6_init();
    J2OBJC_SET_INITIALIZED(ASToolbarImpl_$Lambda$6)
  }
}

@end

void ASToolbarImpl_$Lambda$6_init(ASToolbarImpl_$Lambda$6 *self) {
  NSObject_init(self);
}

ASToolbarImpl_$Lambda$6 *new_ASToolbarImpl_$Lambda$6_init() {
  J2OBJC_NEW_IMPL(ASToolbarImpl_$Lambda$6, init)
}

ASToolbarImpl_$Lambda$6 *create_ASToolbarImpl_$Lambda$6_init() {
  J2OBJC_CREATE_IMPL(ASToolbarImpl_$Lambda$6, init)
}

J2OBJC_INITIALIZED_DEFN(ASToolbarImpl_$Lambda$7)

@implementation ASToolbarImpl_$Lambda$7

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value {
  [((ADXBadgeDrawable *) nil_chk(badge)) setMaxCharacterCountWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(value, [JavaLangInteger class]))) intValue]];
}

+ (void)initialize {
  if (self == [ASToolbarImpl_$Lambda$7 class]) {
    ASToolbarImpl_$Lambda$7_instance = new_ASToolbarImpl_$Lambda$7_init();
    J2OBJC_SET_INITIALIZED(ASToolbarImpl_$Lambda$7)
  }
}

@end

void ASToolbarImpl_$Lambda$7_init(ASToolbarImpl_$Lambda$7 *self) {
  NSObject_init(self);
}

ASToolbarImpl_$Lambda$7 *new_ASToolbarImpl_$Lambda$7_init() {
  J2OBJC_NEW_IMPL(ASToolbarImpl_$Lambda$7, init)
}

ASToolbarImpl_$Lambda$7 *create_ASToolbarImpl_$Lambda$7_init() {
  J2OBJC_CREATE_IMPL(ASToolbarImpl_$Lambda$7, init)
}

J2OBJC_INITIALIZED_DEFN(ASToolbarImpl_$Lambda$8)

@implementation ASToolbarImpl_$Lambda$8

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value {
  [((ADXBadgeDrawable *) nil_chk(badge)) setAlphaWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(value, [JavaLangInteger class]))) intValue]];
}

+ (void)initialize {
  if (self == [ASToolbarImpl_$Lambda$8 class]) {
    ASToolbarImpl_$Lambda$8_instance = new_ASToolbarImpl_$Lambda$8_init();
    J2OBJC_SET_INITIALIZED(ASToolbarImpl_$Lambda$8)
  }
}

@end

void ASToolbarImpl_$Lambda$8_init(ASToolbarImpl_$Lambda$8 *self) {
  NSObject_init(self);
}

ASToolbarImpl_$Lambda$8 *new_ASToolbarImpl_$Lambda$8_init() {
  J2OBJC_NEW_IMPL(ASToolbarImpl_$Lambda$8, init)
}

ASToolbarImpl_$Lambda$8 *create_ASToolbarImpl_$Lambda$8_init() {
  J2OBJC_CREATE_IMPL(ASToolbarImpl_$Lambda$8, init)
}

J2OBJC_INITIALIZED_DEFN(ASToolbarImpl_$Lambda$9)

@implementation ASToolbarImpl_$Lambda$9

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value {
  [((ADXBadgeDrawable *) nil_chk(badge)) setBadgeTextColorWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(value, [JavaLangInteger class]))) intValue]];
}

+ (void)initialize {
  if (self == [ASToolbarImpl_$Lambda$9 class]) {
    ASToolbarImpl_$Lambda$9_instance = new_ASToolbarImpl_$Lambda$9_init();
    J2OBJC_SET_INITIALIZED(ASToolbarImpl_$Lambda$9)
  }
}

@end

void ASToolbarImpl_$Lambda$9_init(ASToolbarImpl_$Lambda$9 *self) {
  NSObject_init(self);
}

ASToolbarImpl_$Lambda$9 *new_ASToolbarImpl_$Lambda$9_init() {
  J2OBJC_NEW_IMPL(ASToolbarImpl_$Lambda$9, init)
}

ASToolbarImpl_$Lambda$9 *create_ASToolbarImpl_$Lambda$9_init() {
  J2OBJC_CREATE_IMPL(ASToolbarImpl_$Lambda$9, init)
}

J2OBJC_INITIALIZED_DEFN(ASToolbarImpl_$Lambda$10)

@implementation ASToolbarImpl_$Lambda$10

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value {
  [((ADXBadgeDrawable *) nil_chk(badge)) setVisibleWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(value, [JavaLangBoolean class]))) booleanValue]];
}

+ (void)initialize {
  if (self == [ASToolbarImpl_$Lambda$10 class]) {
    ASToolbarImpl_$Lambda$10_instance = new_ASToolbarImpl_$Lambda$10_init();
    J2OBJC_SET_INITIALIZED(ASToolbarImpl_$Lambda$10)
  }
}

@end

void ASToolbarImpl_$Lambda$10_init(ASToolbarImpl_$Lambda$10 *self) {
  NSObject_init(self);
}

ASToolbarImpl_$Lambda$10 *new_ASToolbarImpl_$Lambda$10_init() {
  J2OBJC_NEW_IMPL(ASToolbarImpl_$Lambda$10, init)
}

ASToolbarImpl_$Lambda$10 *create_ASToolbarImpl_$Lambda$10_init() {
  J2OBJC_CREATE_IMPL(ASToolbarImpl_$Lambda$10, init)
}

J2OBJC_INITIALIZED_DEFN(ASToolbarImpl_$Lambda$11)

@implementation ASToolbarImpl_$Lambda$11

- (void)setValueOnBadgeDrawableWithADXBadgeDrawable:(ADXBadgeDrawable *)badge
                                             withId:(id)value {
  [((ADXBadgeDrawable *) nil_chk(badge)) setTextAppearanceResourceWithNSString:(NSString *) cast_chk(value, [NSString class])];
}

+ (void)initialize {
  if (self == [ASToolbarImpl_$Lambda$11 class]) {
    ASToolbarImpl_$Lambda$11_instance = new_ASToolbarImpl_$Lambda$11_init();
    J2OBJC_SET_INITIALIZED(ASToolbarImpl_$Lambda$11)
  }
}

@end

void ASToolbarImpl_$Lambda$11_init(ASToolbarImpl_$Lambda$11 *self) {
  NSObject_init(self);
}

ASToolbarImpl_$Lambda$11 *new_ASToolbarImpl_$Lambda$11_init() {
  J2OBJC_NEW_IMPL(ASToolbarImpl_$Lambda$11, init)
}

ASToolbarImpl_$Lambda$11 *create_ASToolbarImpl_$Lambda$11_init() {
  J2OBJC_CREATE_IMPL(ASToolbarImpl_$Lambda$11, init)
}
