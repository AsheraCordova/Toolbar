//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidToolBar\src\main\java\androidx\appcompat\widget\ActionMenuPresenter.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "ActionMenuPresenter.h"
#include "ActionMenuView.h"
#include "BaseMenuPresenter.h"
#include "Context.h"
#include "J2ObjC_source.h"
#include "MenuBuilder.h"
#include "MenuItemImpl.h"
#include "PluginInvoker.h"
#include "SparseBooleanArray.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewParent.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"




#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ADXActionMenuPresenter () {
 @public
  bool mPendingOverflowIconSet_;
  bool mReserveOverflow_;
  bool mReserveOverflowSet_;
  int32_t mWidthLimit_;
  int32_t mActionItemWidthLimit_;
  int32_t mMaxItems_;
  bool mMaxItemsSet_;
  bool mStrictWidthLimit_;
  bool mWidthLimitSet_;
  bool mExpandedActionViewsExclusive_;
  int32_t mMinCellSize_;
  ADSparseBooleanArray *mActionButtonGroups_;
  ADView *mOverflowButton_;
}

- (void)subtractOverFlow;

@end

J2OBJC_FIELD_SETTER(ADXActionMenuPresenter, mActionButtonGroups_, ADSparseBooleanArray *)
J2OBJC_FIELD_SETTER(ADXActionMenuPresenter, mOverflowButton_, ADView *)

__attribute__((unused)) static void ADXActionMenuPresenter_subtractOverFlow(ADXActionMenuPresenter *self);

@implementation ADXActionMenuPresenter

- (void)setReserveOverflowWithBoolean:(bool)reserveOverflow {
  mReserveOverflow_ = reserveOverflow;
  mReserveOverflowSet_ = true;
}

- (ADView *)getItemViewWithADXMenuItemImpl:(ADXMenuItemImpl *)item
                                withADView:(ADView *)convertView
                           withADViewGroup:(ADViewGroup *)parent {
  ADView *actionView = JreRetainedLocalValue([((ADXMenuItemImpl *) nil_chk(item)) getActionView]);
  if (actionView == nil || [item hasCollapsibleActionView]) {
    actionView = [super getItemViewWithADXMenuItemImpl:item withADView:convertView withADViewGroup:parent];
  }
  [((ADView *) nil_chk(actionView)) setVisibilityWithInt:[item isActionViewExpanded] ? ADView_GONE : ADView_VISIBLE];
  ADXActionMenuView *menuParent = (ADXActionMenuView *) cast_chk(parent, [ADXActionMenuView class]);
  ADViewGroup_LayoutParams *lp = [actionView getLayoutParams];
  if (![((ADXActionMenuView *) nil_chk(menuParent)) checkLayoutParamsWithADViewGroup_LayoutParams:lp]) {
    [actionView setLayoutParamsWithADViewGroup_LayoutParams:[menuParent generateLayoutParamsWithADViewGroup_LayoutParams:lp]];
  }
  return actionView;
}

- (bool)shouldIncludeItemWithInt:(int32_t)childIndex
             withADXMenuItemImpl:(ADXMenuItemImpl *)item {
  return [((ADXMenuItemImpl *) nil_chk(item)) isActionButton];
}

- (void)updateMenuViewWithBoolean:(bool)cleared {
  [super updateMenuViewWithBoolean:cleared];
  [((ADView *) nil_chk((mMenuView_))) requestLayout];
  if (mMenu_ != nil) {
    JavaUtilArrayList *actionItems = [mMenu_ getActionItems];
    int32_t count = [((JavaUtilArrayList *) nil_chk(actionItems)) size];
    for (int32_t i = 0; i < count; i++) {
      ADXActionMenuPresenter_ActionProvider *provider = nil;
      if (provider != nil) {
        [provider setSubUiVisibilityListenerWithADXActionMenuPresenter:self];
      }
    }
  }
  JavaUtilArrayList *nonActionItems = mMenu_ != nil ? [mMenu_ getNonActionItems] : nil;
  bool hasOverflow = false;
  if (mReserveOverflow_ && nonActionItems != nil) {
    int32_t count = [nonActionItems size];
    if (count == 1) {
      hasOverflow = ![((ADXMenuItemImpl *) nil_chk([nonActionItems getWithInt:0])) isActionViewExpanded];
    }
    else {
      hasOverflow = (count > 0);
    }
  }
  if (!hasOverflow && mOverflowButton_ != nil) {
    [mOverflowButton_ setVisibilityWithInt:ADView_INVISIBLE];
  }
  if (hasOverflow && mOverflowButton_ != nil) {
    [mOverflowButton_ setVisibilityWithInt:ADView_VISIBLE];
  }
  if (hasOverflow) {
    if (mOverflowButton_ == nil) {
      JreStrongAssign(&mOverflowButton_, [((ADXActionMenuView *) nil_chk(((ADXActionMenuView *) cast_chk(mMenuView_, [ADXActionMenuView class])))) getOverFlowButton]);
    }
    ADViewGroup *parent = (ADViewGroup *) cast_chk([((ADView *) nil_chk(mOverflowButton_)) getParent], [ADViewGroup class]);
    if (!JreObjectEqualsEquals(parent, mMenuView_)) {
      if (parent != nil) {
        [parent removeViewWithADView:mOverflowButton_];
      }
      ADXActionMenuView *menuView = (ADXActionMenuView *) cast_chk(mMenuView_, [ADXActionMenuView class]);
      [((ADXActionMenuView *) nil_chk(menuView)) addViewWithADView:mOverflowButton_ withADViewGroup_LayoutParams:[menuView generateOverflowButtonLayoutParams]];
    }
  }
  else if (mOverflowButton_ != nil && JreObjectEqualsEquals([mOverflowButton_ getParent], mMenuView_)) {
    [((ADViewGroup *) nil_chk(((ADViewGroup *) cast_chk(mMenuView_, [ADViewGroup class])))) removeViewWithADView:mOverflowButton_];
  }
  [((ADXActionMenuView *) nil_chk(((ADXActionMenuView *) cast_chk(mMenuView_, [ADXActionMenuView class])))) setOverflowReservedWithBoolean:mReserveOverflow_];
}

- (bool)flagActionItems {
  JavaUtilArrayList *visibleItems;
  int32_t itemsSize;
  if (mMenu_ != nil) {
    visibleItems = [mMenu_ getVisibleItems];
    itemsSize = [((JavaUtilArrayList *) nil_chk(visibleItems)) size];
  }
  else {
    visibleItems = nil;
    itemsSize = 0;
  }
  int32_t maxActions = mMaxItems_;
  int32_t widthLimit = mActionItemWidthLimit_;
  int32_t querySpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(0, ADView_MeasureSpec_UNSPECIFIED);
  ADViewGroup *parent = (ADViewGroup *) cast_chk(mMenuView_, [ADViewGroup class]);
  int32_t requiredItems = 0;
  int32_t requestedItems = 0;
  int32_t firstActionWidth = 0;
  bool hasOverflow = false;
  for (int32_t i = 0; i < itemsSize; i++) {
    ADXMenuItemImpl *item = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(visibleItems)) getWithInt:i]);
    if ([((ADXMenuItemImpl *) nil_chk(item)) requiresActionButton]) {
      requiredItems++;
    }
    else if ([item requestsActionButton]) {
      requestedItems++;
    }
    else {
      hasOverflow = true;
    }
    if (mExpandedActionViewsExclusive_ && [item isActionViewExpanded]) {
      maxActions = 0;
    }
  }
  if (mReserveOverflow_ && (hasOverflow || requiredItems + requestedItems > maxActions)) {
    maxActions--;
  }
  maxActions -= requiredItems;
  ADSparseBooleanArray *seenGroups = mActionButtonGroups_;
  [((ADSparseBooleanArray *) nil_chk(seenGroups)) clear];
  int32_t cellSize = 0;
  int32_t cellsRemaining = 0;
  if (mStrictWidthLimit_) {
    cellsRemaining = JreIntDiv(widthLimit, mMinCellSize_);
    int32_t cellSizeRemaining = JreIntMod(widthLimit, mMinCellSize_);
    cellSize = mMinCellSize_ + JreIntDiv(cellSizeRemaining, cellsRemaining);
  }
  for (int32_t i = 0; i < itemsSize; i++) {
    ADXMenuItemImpl *item = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(visibleItems)) getWithInt:i]);
    if ([((ADXMenuItemImpl *) nil_chk(item)) requiresActionButton]) {
      ADView *v = JreRetainedLocalValue([self getItemViewWithADXMenuItemImpl:item withADView:nil withADViewGroup:parent]);
      if (mStrictWidthLimit_) {
        cellsRemaining -= ADXActionMenuView_measureChildForCellsWithADView_withInt_withInt_withInt_withInt_(v, cellSize, cellsRemaining, querySpec, 0);
      }
      else {
        [((ADView *) nil_chk(v)) measureWithInt:querySpec withInt:querySpec];
      }
      int32_t measuredWidth = [((ADView *) nil_chk(v)) getMeasuredWidth];
      widthLimit -= measuredWidth;
      if (firstActionWidth == 0) {
        firstActionWidth = measuredWidth;
      }
      int32_t groupId = [item getGroupId];
      if (groupId != 0) {
        [seenGroups putWithInt:groupId withBoolean:true];
      }
      [item setIsActionButtonWithBoolean:true];
    }
    else if ([item requestsActionButton]) {
      int32_t groupId = [item getGroupId];
      bool inGroup = [seenGroups getWithInt:groupId];
      bool isAction = (maxActions > 0 || inGroup) && widthLimit > 0 && (!mStrictWidthLimit_ || cellsRemaining > 0);
      if (isAction) {
        ADView *v = JreRetainedLocalValue([self getItemViewWithADXMenuItemImpl:item withADView:nil withADViewGroup:parent]);
        if (mStrictWidthLimit_) {
          int32_t cells = ADXActionMenuView_measureChildForCellsWithADView_withInt_withInt_withInt_withInt_(v, cellSize, cellsRemaining, querySpec, 0);
          cellsRemaining -= cells;
          if (cells == 0) {
            isAction = false;
          }
        }
        else {
          [((ADView *) nil_chk(v)) measureWithInt:querySpec withInt:querySpec];
        }
        int32_t measuredWidth = [((ADView *) nil_chk(v)) getMeasuredWidth];
        widthLimit -= measuredWidth;
        if (firstActionWidth == 0) {
          firstActionWidth = measuredWidth;
        }
        if (mStrictWidthLimit_) {
          isAction &= (widthLimit >= 0);
        }
        else {
          isAction &= (widthLimit + firstActionWidth > 0);
        }
      }
      if (isAction && groupId != 0) {
        [seenGroups putWithInt:groupId withBoolean:true];
      }
      else if (inGroup) {
        [seenGroups putWithInt:groupId withBoolean:false];
        for (int32_t j = 0; j < i; j++) {
          ADXMenuItemImpl *areYouMyGroupie = JreRetainedLocalValue([visibleItems getWithInt:j]);
          if ([((ADXMenuItemImpl *) nil_chk(areYouMyGroupie)) getGroupId] == groupId) {
            if ([areYouMyGroupie isActionButton]) maxActions++;
            [areYouMyGroupie setIsActionButtonWithBoolean:false];
          }
        }
      }
      if (isAction) maxActions--;
      [item setIsActionButtonWithBoolean:isAction];
    }
    else {
      [item setIsActionButtonWithBoolean:false];
    }
  }
  return true;
}

- (void)setMenuViewWithADXActionMenuView:(ADXActionMenuView *)menuView {
  JreStrongAssign(&mMenuView_, menuView);
  [((ADXActionMenuView *) nil_chk(menuView)) initialize__WithADXMenuBuilder:mMenu_];
  ADXActionMenuPresenter_subtractOverFlow(self);
}

- (instancetype)initPackagePrivate {
  ADXActionMenuPresenter_initPackagePrivate(self);
  return self;
}

- (ADView *)getItemViewWithADView:(ADView *)parent
              withADXMenuItemImpl:(ADXMenuItemImpl *)item {
  ADXActionMenuView *menuParent = (ADXActionMenuView *) cast_chk(parent, [ADXActionMenuView class]);
  return [((ADXActionMenuView *) nil_chk(menuParent)) getItemViewWithADMenuItem:item];
}

- (bool)isMenuItemViewWithADView:(ADView *)convertView {
  return ADXActionMenuView_isActionMenuItemViewWithADView_(convertView);
}

- (int32_t)getMaxActionButtons {
  int32_t widthDp = ASPluginInvoker_getScreenWidthDp();
  int32_t heightDp = ASPluginInvoker_getScreenHeightDp();
  int32_t smallest = widthDp > heightDp ? widthDp : heightDp;
  if (smallest > 600 || widthDp > 600 || (widthDp > 960 && heightDp > 720) || (widthDp > 720 && heightDp > 960)) {
    return 5;
  }
  else if (widthDp >= 500 || (widthDp > 640 && heightDp > 480) || (widthDp > 480 && heightDp > 640)) {
    return 4;
  }
  else {
    return widthDp >= 360 ? 3 : 2;
  }
}

- (void)subtractOverFlow {
  ADXActionMenuPresenter_subtractOverFlow(self);
}

- (void)setOverFlowButtonWithADView:(ADView *)overflowButton {
  JreStrongAssign(&mOverflowButton_, overflowButton);
}

- (void)initForMenuWithADContext:(ADContext *)menuContext
              withADXMenuBuilder:(ADXMenuBuilder *)menuBuilder {
}

- (void)dealloc {
  RELEASE_(mActionButtonGroups_);
  RELEASE_(mOverflowButton_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 2, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setReserveOverflowWithBoolean:);
  methods[1].selector = @selector(getItemViewWithADXMenuItemImpl:withADView:withADViewGroup:);
  methods[2].selector = @selector(shouldIncludeItemWithInt:withADXMenuItemImpl:);
  methods[3].selector = @selector(updateMenuViewWithBoolean:);
  methods[4].selector = @selector(flagActionItems);
  methods[5].selector = @selector(setMenuViewWithADXActionMenuView:);
  methods[6].selector = @selector(initPackagePrivate);
  methods[7].selector = @selector(getItemViewWithADView:withADXMenuItemImpl:);
  methods[8].selector = @selector(isMenuItemViewWithADView:);
  methods[9].selector = @selector(getMaxActionButtons);
  methods[10].selector = @selector(subtractOverFlow);
  methods[11].selector = @selector(setOverFlowButtonWithADView:);
  methods[12].selector = @selector(initForMenuWithADContext:withADXMenuBuilder:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mPendingOverflowIconSet_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mReserveOverflow_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mReserveOverflowSet_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mWidthLimit_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mActionItemWidthLimit_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxItems_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxItemsSet_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mStrictWidthLimit_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mWidthLimitSet_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mExpandedActionViewsExclusive_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMinCellSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mActionButtonGroups_", "LADSparseBooleanArray;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mOpenSubMenuId_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mOverflowButton_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setReserveOverflow", "Z", "getItemView", "LADXMenuItemImpl;LADView;LADViewGroup;", "shouldIncludeItem", "ILADXMenuItemImpl;", "updateMenuView", "setMenuView", "LADXActionMenuView;", "LADView;LADXMenuItemImpl;", "isMenuItemView", "LADView;", "setOverFlowButton", "initForMenu", "LADContext;LADXMenuBuilder;", "LADXActionMenuPresenter_ActionProvider;" };
  static const J2ObjcClassInfo _ADXActionMenuPresenter = { "ActionMenuPresenter", "androidx.appcompat.widget", ptrTable, methods, fields, 7, 0x0, 13, 14, -1, 15, -1, -1, -1 };
  return &_ADXActionMenuPresenter;
}

@end

void ADXActionMenuPresenter_initPackagePrivate(ADXActionMenuPresenter *self) {
  ADXBaseMenuPresenter_init(self);
  JreStrongAssignAndConsume(&self->mActionButtonGroups_, new_ADSparseBooleanArray_init());
  self->mReserveOverflow_ = true;
  self->mWidthLimit_ = JreIntDiv(ASPluginInvoker_getScreenWidth(), 2);
  self->mActionItemWidthLimit_ = self->mWidthLimit_;
  self->mMinCellSize_ = (int32_t) (ADXActionMenuView_MIN_CELL_SIZE);
  self->mMaxItems_ = [self getMaxActionButtons];
}

ADXActionMenuPresenter *new_ADXActionMenuPresenter_initPackagePrivate() {
  J2OBJC_NEW_IMPL(ADXActionMenuPresenter, initPackagePrivate)
}

ADXActionMenuPresenter *create_ADXActionMenuPresenter_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(ADXActionMenuPresenter, initPackagePrivate)
}

void ADXActionMenuPresenter_subtractOverFlow(ADXActionMenuPresenter *self) {
  int32_t width = self->mWidthLimit_;
  if (self->mReserveOverflow_) {
    if (self->mOverflowButton_ == nil) {
      JreStrongAssign(&self->mOverflowButton_, [((ADXActionMenuView *) nil_chk(((ADXActionMenuView *) cast_chk(self->mMenuView_, [ADXActionMenuView class])))) getOverFlowButton]);
      int32_t spec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(0, ADView_MeasureSpec_UNSPECIFIED);
      [((ADView *) nil_chk(self->mOverflowButton_)) measureWithInt:spec withInt:spec];
    }
    width -= [((ADView *) nil_chk(self->mOverflowButton_)) getMeasuredWidth];
  }
  else {
    JreStrongAssign(&self->mOverflowButton_, nil);
  }
  self->mWidthLimit_ = width;
  self->mActionItemWidthLimit_ = self->mWidthLimit_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXActionMenuPresenter)

@implementation ADXActionMenuPresenter_ActionProvider

- (instancetype)initWithADXActionMenuPresenter:(ADXActionMenuPresenter *)outer$ {
  ADXActionMenuPresenter_ActionProvider_initWithADXActionMenuPresenter_(self, outer$);
  return self;
}

- (void)setSubUiVisibilityListenerWithADXActionMenuPresenter:(ADXActionMenuPresenter *)actionMenuPresenter {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXActionMenuPresenter:);
  methods[1].selector = @selector(setSubUiVisibilityListenerWithADXActionMenuPresenter:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADXActionMenuPresenter;", "setSubUiVisibilityListener" };
  static const J2ObjcClassInfo _ADXActionMenuPresenter_ActionProvider = { "ActionProvider", "androidx.appcompat.widget", ptrTable, methods, NULL, 7, 0x0, 2, 0, 0, -1, -1, -1, -1 };
  return &_ADXActionMenuPresenter_ActionProvider;
}

@end

void ADXActionMenuPresenter_ActionProvider_initWithADXActionMenuPresenter_(ADXActionMenuPresenter_ActionProvider *self, ADXActionMenuPresenter *outer$) {
  NSObject_init(self);
}

ADXActionMenuPresenter_ActionProvider *new_ADXActionMenuPresenter_ActionProvider_initWithADXActionMenuPresenter_(ADXActionMenuPresenter *outer$) {
  J2OBJC_NEW_IMPL(ADXActionMenuPresenter_ActionProvider, initWithADXActionMenuPresenter_, outer$)
}

ADXActionMenuPresenter_ActionProvider *create_ADXActionMenuPresenter_ActionProvider_initWithADXActionMenuPresenter_(ADXActionMenuPresenter *outer$) {
  J2OBJC_CREATE_IMPL(ADXActionMenuPresenter_ActionProvider, initWithADXActionMenuPresenter_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXActionMenuPresenter_ActionProvider)
